url <- 'https://www.imdb.com/search/title/?release_date=2017-01-01.2017-12-31&count=250'
url <- 'https://www.irishtimes.com/top1000' # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(1) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10) # Replace the new line characters company_data <- gsub("\n *", "", company_data) head(company_data, 10) length(company_data)
company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(1) > td.name > a')
library(rvest) url <- 'https://www.irishtimes.com/top1000' # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(1) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10) # Replace the new line characters company_data <- gsub("\n *", "", company_data) head(company_data, 10) length(company_data)
library(rvest) url <- 'https://www.irishtimes.com/top1000' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(1) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10) # Replace the new line characters company_data <- gsub("\n *", "", company_data) head(company_data, 10) length(company_data)
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') #head(company_data_html, 10)
company_data <- html_text(company_data_html) head(company_data, 10)
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, 'name') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, 'name') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
# company data below company_data_html <- html_nodes(web_page, '#companies > div:nth-child(n) > div.content > a > div > span.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
# company data below company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > p') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
rank_data_html <- html_nodes(web_page, '#main > div > div > div.lister-list > div:nth-child(n) > div.lister-item-content > h3 > span.lister-item-index.unbold.text-primary') head(rank_data_html, 10) # should have 250 records length(rank_data_html)
rank_data_html <- html_nodes(web_page, '#companies > div:nth-child(n) > div.content > a > div > p') head(rank_data_html, 10) # should have 250 records length(rank_data_html)
head(rank_data_html, 10)
rank_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') head(rank_data_html, 10)
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data head(company_data, 10)
web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '.span8 companyListing') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
# company data below company_data_html <- html_nodes(web_page, '.span8') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
url <- 'http://www.top1000.ie/companies' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '.content') #head(company_data_html, 10) company_data <- html_text(company_data_html) company_data
web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
url <- 'https://www.irishtimes.com/top1000' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(4) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
url <- 'https://www.irishtimes.com/top1000' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(301) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
url <- 'https://www.irishtimes.com/top1000' web_page <- read_html(url) # company data below company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 10)
head(company_data, 110)
url <- 'http://www.top1000.ie/industries/agribusiness' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 110)
length(company_data)
url <- 'https://realbusiness.co.uk/business-growth/2016/11/10/uks-fastest-growing-private-companies-hot-100-2016/' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#post-97754 > div.post-container.cf > div > div > h6:nth-child(6)') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 110)
company_data_html <- html_nodes(web_page, '#post-97754 > div.post-container.cf > div > div > h6:nth-child(n)') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 110)
url <- 'https://www.bea.gov/iTable/iTable.cfm?ReqID=51&step=1#reqid=51&step=51&isuri=1&5114=a&5102=15' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#tbl_wrapper > div > div.DTFC_LeftWrapper > div.DTFC_LeftBodyWrapper > div > table > tbody > tr:nth-child(6) > td.BoldStubStyle.Locked > span') #head(company_data_html, 10) company_data <- html_text(company_data_html) head(company_data, 110)
url <- 'https://eresearch.fidelity.com/eresearch/markets_sectors/sectors/sectors_in_market.jhtml' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#sector_div_container > table > tbody > tr:nth-child(1) > th > div > a') #head(company_data_html, 10)
company_data <- html_text(company_data_html) head(company_data, 4)
url <- 'https://www.nasdaq.com/screening/companies-by-industry.aspx?industry=Energy&sortname=marketcap&sorttype=1' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#CompanylistResults > tbody > tr:nth-child(1) > td:nth-child(1) > a') company_data <- html_text(company_data_html) head(company_data, 4)
url <- 'https://www.nasdaq.com/screening/companies-by-industry.aspx?industry=Energy&sortname=marketcap&sorttype=1' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#CompanylistResults > tbody > tr:nth-child(n) > td:nth-child(1) > a') company_data <- html_text(company_data_html) head(company_data,  url <- 'https://www.nasdaq.com/screening/companies-by-industry.aspx?industry=Energy&sortname=marketcap&sorttype=1' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#CompanylistResults > tbody > tr:nth-child(n) > td:nth-child(1) > a') company_data <- html_text(company_data_html) head(company_data, 4)
url <- 'https://www.nasdaq.com/screening/companies-by-industry.aspx?industry=Energy&sortname=marketcap&sorttype=1' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '.CompanylistResults') company_data <- html_text(company_data_html) head(company_data, 4)
url <- 'https://www.idaireland.com/doing-business-here/company-listing' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#listResults > div > div.large-16.large-centered.columns > table > tbody > tr:nth-child(1) > td:nth-child(1) > strong') company_data <- html_text(company_data_html) head(company_data, 4)
url <- 'https://www.idaireland.com/doing-business-here/company-listing' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#listResults > div > div.large-16.large-centered.columns > table > tbody > tr:nth-child(n) > td:nth-child(1) > strong') company_data <- html_text(company_data_html) head(company_data, 4)
company_data
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#companies > div:nth-child(1) > div.content > a > div > span.name') company_data <- html_text(company_data_html) head(company_data, 4) company_data
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '#companies > div:nth-child(n) > div.content > a > div > span.name') company_data <- html_text(company_data_html) head(company_data, 4) company_data
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) # company data below # Below works #company_data_html <- html_nodes(web_page, '#top1000datatable > tbody > tr:nth-child(n) > td.name > a') company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) head(company_data, 4) company_data
head(company_data, 4)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) head(company_data, 20)
employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) head(employee_data, 20)
web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) head(company_data, 20) employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) head(employee_data, 20) turnover_data_html <- html_nodes(web_page, '.employee') employee_data <- html_text(employee_data_html) head(employee_data, 20)
web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) head(company_data, 20) employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) head(employee_data, 20) turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) head(turnover_data, 20)
employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) head(employee_data, 30)
company_data <- html_text(company_data_html) company_data = gsub("[[:digit:]]", "", company_data) head(company_data, 20)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) company_data = gsub("[[:digit:]]. ", "", company_data) head(company_data, 20)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) company_data = gsub("[[:digit:]]", "", company_data) head(company_data, 20)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) company_data = gsub("[[:digit:]]", "", company_data) company_data = gsub(". ", "", company_data) head(company_data, 20)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) company_data = gsub("[[:digit:]]", "", company_data) company_data = gsub("'. '", "", company_data) head(company_data, 20)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) company_data = gsub("[[:digit:]]", "", company_data) company_data = gsub("\\. ", "", company_data) head(company_data, 20)
employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) head(employee_data, 30)
employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) employee_data <- gsub("[^0-9\\,]", "", employee_data) head(employee_data, 30)
employee_data_html <- html_nodes(web_page, '.employees') employee_data <- html_text(employee_data_html) employee_data <- gsub("[^0-9]", "", employee_data) head(employee_data, 30)
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) head(turnover_data, 20)
energy_companies <- data.frame(company = company_data, employee = employee_data, turnover = turnover_data)
energy_companies
head(turnover_data, 20)
# Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) head(turnover_data, 20)
energy_companies <- data.frame(company = company_data, employee = employee_data, turnover = turnover_data)
energy_companies
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) energy_companies <- data.frame(company = company_data, employee = employee_data, turnover = turnover_data) energy_companies
calculate_turnover("3 billion")
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    pos = grep('billion', turnover)
    return(pos)
}
calculate_turnover("3 billion")
calculate_turnover("3 illion")
calculate_turnover("3 billion")
turnover <- "3 billion" turnover <- gsub(" billion", "", turnover)
turnover <- turnover * 1000000000 turnover
turnover <- "3 billion" turnover <- gsub(" billion", "", turnover)
turnover <- as.numeric(turnover) * 1000000000 turnover
turnover <- "1 billion" turnover <- gsub(" billion", "", turnover)
turnover <- as.numeric(turnover) * 1000000000 turnover
turnover <- "1 billion" turnover <- gsub(" billion", "", turnover)
turnover <- as.numeric(turnover) * 1000000000 # Remove the scientific because, for example, 1 billion was returning as 1e+09 turnover <- format(turnover, scientific = FALSE) turnover
turnover_data <- calculate_turnover("3 billion") turnover_data
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos = grep('billion', turnover)
    if (pos > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000         # Remove the scientific because, for example, 1 billion was returning as 1e+09         turnover <- format(turnover, scientific = FALSE)         turnover
    }
    return(turnover)
}
turnover_data <- calculate_turnover("3 billion") turnover_data
energy_companies
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos = grep('billion', turnover)
    if (pos > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }
    pos = grep('million', turnover)
    if (pos > 0) {
        # Remove billion
        turnover <- gsub(" million", "", turnover)
        turnover <- as.numeric(turnover) * 1000000000
    }
    # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)
    return(turnover)
}
turnover_data <- calculate_turnover("3 million") turnover_data
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos = grep('billion', turnover)
    if (pos > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }
    pos = grep(' million', turnover)
    if (pos > 0) {
        # Remove billion
        turnover <- gsub(" million", "", turnover)
        turnover <- as.numeric(turnover) * 1000000000
    }
    # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)
    return(turnover)
}
turnover_data <- calculate_turnover("3 million") turnover_data
turnover_data <- calculate_turnover("3 billion") turnover_data
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos <- as.numeric(grep('billion', turnover))
    if (pos > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }
    pos <- as.numeric(grep(' million', turnover))
    if (pos > 0) {
        # Remove billion
        turnover <- gsub(" million", "", turnover)
        turnover <- as.numeric(turnover) * 1000000000
    }
    # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)
    return(turnover)
}
turnover_data <- calculate_turnover("3 billion") turnover_data
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos <- grep('billion', turnover)
    if (length(pos) > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }
    pos <- grep(' million', turnover)
    if (length(pos) > 0) {
        # Remove billion
        turnover <- gsub(" million", "", turnover)
        turnover <- as.numeric(turnover) * 1000000000
    }
    # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)
    return(turnover)
}
turnover_data <- calculate_turnover("3 billion") turnover_data
turnover_data <- calculate_turnover(turnover_data) turnover_data
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20)
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) #turnover_data <- calculate_turnover(turnover_data) #turnover_data energy_companies <- data.frame(company = company_data, employee = employee_data, turnover = turnover_data)
energy_companies <- data.frame(company = company_data, employee = employee_data, turnover = turnover_data) energy_companies
mapply(calculate_turnover, energy_companies$turnover)
energy_companies
energy_companies$turnover <- mapply(calculate_turnover, energy_companies$turnover)
energy_companies
test <- "1.4" test <- as.numeric(test) * 2 test
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) energy_companies <- data.frame(company = company_data, employee = employee_data, turnover = turnover_data)
energy_companies
test <- "485.9 million" test <- calculate_turnover(test) test
calculate_turnover <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos <- grep('billion', turnover)
    if (length(pos) > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }
    # If the string contans million multiply by a billion
    pos <- grep(' million', turnover)
    if (length(pos) > 0) {
        # Remove billion
        turnover <- gsub(" million", "", turnover)
        turnover <- as.numeric(turnover) * 1000000
    }
    # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)
    return(turnover)
}
test <- "485.9 million" test <- calculate_turnover(test) test
energy_companies$turnover <- mapply(calculate_turnover, energy_companies$turnover)
energy_companies
convert_millions_and_billions <- function(turnover) {
    all_file_data <- NULL
    # If the string contans billion multiply by a billion
    pos <- grep('billion', turnover)
    if (length(pos) > 0) {
        # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }
    # If the string contans million multiply by a billion
    pos <- grep(' million', turnover)
    if (length(pos) > 0) {
        # Remove billion
        turnover <- gsub(" million", "", turnover)
        turnover <- as.numeric(turnover) * 1000000
    }
    # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)
    return(turnover)
}
energy_companies
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_data_html <- html_nodes(web_page, '.name') company_data <- html_text(company_data_html) # Remove all digits company_data <- gsub("[[:digit:]]", "", company_data) # Remove all '. ' company_data <- gsub("\\. ", "", company_data) head(company_data, 20)
turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20)
head(turnover_data, 20) turnover_data <- mapply(convert_millions_and_billions, turnover_data) head(turnover_data, 20)
head(turnover_data, 20)
turnover_data
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) turnover_data <- mapply(convert_millions_and_billions, turnover_data) head(turnover_data, 20)
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20)
turnover_data_converted <- mapply(convert_millions_and_billions, turnover_data) head(turnover_data_converted, 20)
length(turnover_data_converted)
energy_companies
head(turnover_data_converted, 20)
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20)
energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data) energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover) energy_companies
energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data)
energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data)
url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_names_html <- html_nodes(web_page, '.name') company_names <- html_text(company_names_html) # Remove all digits company_names <- gsub("[[:digit:]]", "", company_names) # Remove all '. ' company_names <- gsub("\\. ", "", company_names) head(company_names, 20)
################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20)
################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20)
energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data)
energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover)
energy_companies
turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20)
energy_companies
energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data)
energy_companies
energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover)
energy_companies
write.csv(energy_companies, file = "EnergyCompanies.csv", row.names = FALSE, na = "")
################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_names_html <- html_nodes(web_page, '.name') company_names <- html_text(company_names_html) # Remove all digits company_names <- gsub("[[:digit:]]", "", company_names) # Remove all dots and spaces company_names <- gsub("\\. ", "", company_names) head(company_names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create the data frame energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data) # Show the data frame prior to converting millions and billions energy_companies # Convert the turnover to numbers energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover) # Show the data frame after converting millions and billions energy_companies
library(rvest) #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries/energy' web_page <- read_html(url) company_names_html <- html_nodes(web_page, '.name') company_names <- html_text(company_names_html) # Remove all digits company_names <- gsub("[[:digit:]]", "", company_names) # Remove all dots and spaces company_names <- gsub("\\. ", "", company_names) head(company_names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000       }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create the data frame energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data) # Show the data frame prior to converting millions and billions energy_companies # Convert the turnover to numbers energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover) # Show the data frame after converting millions and billions energy_companies # Create the CSV file write.csv(energy_companies, file = "EnergyCompanies.csv", row.names = FALSE, na = "")
url
url <- 'http://www.top1000.ie/industries' paste(url, "energy", sep = "/") url
url
url <- 'http://www.top1000.ie/industries' url <- paste(url, "energy", sep = "/") url
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' url <- paste(url, "energy", sep = "/") url web_page <- read_html(url) company_names_html <- html_nodes(web_page, '.name') company_names <- html_text(company_names_html) # Remove all digits company_names <- gsub("[[:digit:]]", "", company_names) # Remove all dots and spaces company_names <- gsub("\\. ", "", company_names) head(company_names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create the data frame energy_companies <- data.frame(company = company_names, employee = employee_numbers, turnover = turnover_data) # Show the data frame prior to converting millions and billions energy_companies # Convert the turnover to numbers energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover) # Show the data frame after converting millions and billions energy_companies # Create the CSV file write.csv(energy_companies, file = "EnergyCompanies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' url <- paste(url, "energy", sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create the data frame energy_companies <- data.frame(company = names, employee = employee_numbers, turnover = turnover_data) # Show the data frame prior to converting millions and billions energy_companies # Convert the turnover to numbers energy_companies$turnover <- mapply(convert_millions_and_billions, energy_companies$turnover) # Show the data frame after converting millions and billions energy_companies # Create the CSV file write.csv(energy_companies, file = "EnergyCompanies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' url <- paste(url, "energy", sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create the data frame companies <- data.frame(company = names, employee = employee_numbers, turnover = turnover_data) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "EnergyCompanies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create the data frame companies <- data.frame(company = names, employee = employee_numbers, turnover = turnover_data) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "EnergyCompanies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) list2 <- rep("2009-01-01", length(list1)) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$Turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
elibrary(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$Turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$turnover <- mapply(convert_millions_and_billions, companies$Turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } #########################  Energy Companiies ############################## ################### # Store the names of the companies ################### url <- 'http://www.top1000.ie/industries' type <- "energy" url <- paste(url, type, sep = "/") url web_page <- read_html(url) names_html <- html_nodes(web_page, '.name') names <- html_text(names_html) # Remove all digits names <- gsub("[[:digit:]]", "", names) # Remove all dots and spaces names <- gsub("\\. ", "", names) head(names, 20) ################### # Store the number of Employees ################### employee_numbers_html <- html_nodes(web_page, '.employees') employee_numbers <- html_text(employee_numbers_html) # Remove all non numeric characters employee_numbers <- gsub("[^0-9]", "", employee_numbers) head(employee_numbers, 20) ################### # Store the turnover data ################### turnover_data_html <- html_nodes(web_page, '.turnover') turnover_data <- html_text(turnover_data_html) # Remove all non numeric characters turnover_data <- gsub("[\\€,]", "", turnover_data) # Remove all non numeric characters turnover_data <- gsub(" turnover", "", turnover_data) head(turnover_data, 20) # Create column of type company_type <- rep(type, length(names)) # Create the data frame companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type) # Show the data frame prior to converting millions and billions companies # Convert the turnover to numbers companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
create_dataframe("energy") # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } #########################  Energy Companiies ############################## create_dataframe("energy") # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
companies  <- create_dataframe("energy") # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
companies <- create_dataframe("energy") companies <- create_dataframe("agribusiness") # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
companies <- create_dataframe("financial-services") # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
companies <- create_dataframe("communications") # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") communications_companies <- create_dataframe("communications") companies <- rbind(energy_companies, communications_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") companies <- rbind(energy_companies, pharma_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") companies <- rbind(energy_companies, pharma_companies, construction_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") technology_companies <- create_dataframe("technology") companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") technology_companies <- create_dataframe("technology") mediaandmarketing_companies <- create_dataframe("media-and-marketing") companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, mediaandmarketing_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") technology_companies <- create_dataframe("technology") food_companies <- create_dataframe("food") companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, food_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") technology_companies <- create_dataframe("technology") foodanddrink_companies <- create_dataframe("food-and-beverage") companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodanddrink_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") technology_companies <- create_dataframe("technology") foodanddrink_companies <- create_dataframe("food-and-beverage") companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodanddrink_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } #########################  Energy Companiies ############################## energy_companies <- create_dataframe("energy") pharma_companies <- create_dataframe("pharma") construction_companies <- create_dataframe("construction") technology_companies <- create_dataframe("technology") foodandbeverage_companies <- create_dataframe("food-and-beverage") companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Show the data frame after converting millions and billions companies # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
str(companies)
# Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies)
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- as.numeric(gsub(" turnover", "", turnover_data))     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = as.numeric(turnover_data), CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     turnover_data <- as.numeric(turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- as.numeric(gsub(" turnover", "", turnover_data))     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
# Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
as.numeric(companies$Turnover)
companies$Turnover
# Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "") companies$Turnover as.numeric(companies$Turnover)
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
companies$Turnover
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     #companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
library(rvest) ################### # The turnover is stored as million or billion. # This function converts a million or billion to it's numeric equivalent # For example: "1.5 million" will be converted to 1500000 ################### convert_millions_and_billions <- function(turnover) {     all_file_data <- NULL     # If the string contans billion multiply by a billion     pos <- grep('billion', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" billion", "", turnover)         turnover <- as.numeric(turnover) * 1000000000     }     # If the string contans million multiply by a billion     pos <- grep(' million', turnover)     if (length(pos) > 0) {         # Remove billion         turnover <- gsub(" million", "", turnover)         turnover <- as.numeric(turnover) * 1000000     }     # Remove the scientific because, for example, 1 billion was returning as 1e+09     turnover <- format(turnover, scientific = FALSE)     return(turnover) } create_dataframe <- function(type) {     ###################     # Store the names of the companies     ###################     url <- 'http://www.top1000.ie/industries'     url <- paste(url, type, sep = "/")     web_page <- read_html(url)     names_html <- html_nodes(web_page, '.name')     names <- html_text(names_html)     # Remove all digits     names <- gsub("[[:digit:]]", "", names)     # Remove all dots and spaces     names <- gsub("\\. ", "", names)     ###################     # Store the number of Employees     ###################     employee_numbers_html <- html_nodes(web_page, '.employees')     employee_numbers <- html_text(employee_numbers_html)     # Remove all non numeric characters     employee_numbers <- gsub("[^0-9]", "", employee_numbers)     ###################     # Store the turnover data     ###################     turnover_data_html <- html_nodes(web_page, '.turnover')     turnover_data <- html_text(turnover_data_html)     # Remove all non numeric characters     turnover_data <- gsub("[\\€,]", "", turnover_data)     # Remove all non numeric characters     turnover_data <- gsub(" turnover", "", turnover_data)     # Create column of type     company_type <- rep(type, length(names))     # Create the data frame     companies <- data.frame(Company = names, NumEmployees = employee_numbers, Turnover = turnover_data, CompanyType = type)     # Convert the turnover to numbers     #companies$Turnover <- mapply(convert_millions_and_billions, companies$Turnover)     return(companies) } # Get Energy Companies energy_companies <- create_dataframe("energy") # Get Pharma Companies pharma_companies <- create_dataframe("pharma") # Get Construction Companies construction_companies <- create_dataframe("construction") # Get Technology Companies #technology_companies <- create_dataframe("technology") # Get Food and Beverage Companies foodandbeverage_companies <- create_dataframe("food-and-beverage") # Put all the companies into the same data frame companies <- rbind(energy_companies, pharma_companies, construction_companies, technology_companies, foodandbeverage_companies) # Factorise the CompanyType type attribute. Show the modified structure.  companyType <- factor(companies$CompanyType, order = FALSE, levels =     c("energy", "pharma", "construction", "technology", "food-and-beverage")) companies$CompanyType <- companyType # Show the data frame after converting millions and billions companies str(companies) # Create the CSV file write.csv(companies, file = "Companies.csv", row.names = FALSE, na = "")
