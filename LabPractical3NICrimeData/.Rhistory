# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. a <- 3 a
csv_file_list <- list.files(pattern = "*.csv")
csv_file_list <- list.files(pattern = "*.csv")
# Examine the vector
csv_file_list
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime DataNI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime DataNI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime DataNI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime DataNI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("C:/Users/Owner/Source/Repos/DataScience/LabPractical3NICrimeData/NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*/*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*/*.csv")
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/lotto
#csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise lotto_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_lotto_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        lotto_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- lotto_file[1:8]
        # append vertically to the all_lotto_data data frame
        all_lotto_data <- rbind(all_lotto_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_lotto_data)
}
# Call the function and return the result to a data frame
my_lotto_data <- combine_results(csv_file_list)
head(my_lotto_data, 10)
nrow(my_lotto_data)
# (a) Using R, amalgamate all of the crime #data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/nicrime
#csv_file_list <- list.files(path = "c:/nicrime", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_nicrime_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[1:8]
        # append vertically to the all_nicrime_data data frame
        all_nicrime_data <- rbind(all_nicrime_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_nicrime_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list)
head(my_nicrime_data, 10)
nrow(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # Save this dataset into a csv file called AllNICrimeData.  # Count and show the number of rows in the AllNICrimeData dataset. # Create a vector of filenames containing file extension .csv
# located in c:/nicrime
#csv_file_list <- list.files(path = "c:/nicrime", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_nicrime_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file
        # append vertically to the all_nicrime_data data frame
        all_nicrime_data <- rbind(all_nicrime_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_nicrime_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list)
head(my_nicrime_data, 10)
nrow(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # Create a vector of filenames containing file extension .csv
# located in c:/nicrime
#csv_file_list <- list.files(path = "c:/nicrime", pattern = "*.csv")
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Examine the vector
csv_file_list
# Function that reads all csv files into one data frame and returns the result.
combine_results <- function(file_list) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_nicrime_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste("NI Crime Data/", csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file
        # append vertically to the all_nicrime_data data frame
        all_nicrime_data <- rbind(all_nicrime_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_nicrime_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_nicrime_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = ""), stringsAsFactors = FALSE)
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file
        # append vertically to the all_nicrime_data data frame
        all_nicrime_data <- rbind(all_nicrime_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_nicrime_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/")
tail(my_nicrime_data, 20)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[1,4:6]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/")
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData2.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
str(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[5:7]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/")
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData2.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
str(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", "5:7")
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData2.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
str(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
myColumns <- c("Month", "Longitude", "Latitude", "Location")
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData2.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
str(my_nicrime_data)
str(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
myColumns <- c("Month", "Longitude", "Latitude", "Location", "Crime type")
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
myColumns <- c("Month", "Longitude", "Latitude", "Location", "Crime type")
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
myColumns <- c("Month", "Longitude", "Latitude", "Location")
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(4:6,9)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
str(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
str(my_nicrime_data)
# Modify the County attribute to a categorising factor. crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# Modify the County attribute to a categorising factor. crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Vehicle crime"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
my_nicrime_data$Location <- gsub('On or near ', '', my_nicrime_data$Location)
head(my_nicrime, 10)
head(my_nicrime_data, 10)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (d) Modify the AllNICrimeData dataset so that the Location attribute contains only a street name.  # For example, the attribute value “On or near Westrock Square” should be modified to only contain “Westrock Square”.  # Modify the resultant empty location attributes with a suitable identifier. 
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub('On or near ', '', my_nicrime_data$Location)
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
my_nicrime_data$Location <- gsub("", NA, my_nicrime_data$Location)
head(my_nicrime_data, 10)
find_a_postcode <- function(location) {
    postcode_data <- data.frame(read.csv("CleanNIPostcodeData.csv", header = FALSE,         na.strings = c("", "NA", " ", ".")))
    head(postscript, 10)
}
this_location <- find_a_postcode("abc")
find_a_postcode <- function(location) {
    postcode_data <- data.frame(read.csv("CleanNIPostcodeData.csv", header = FALSE, na.strings = c("", "NA", " ", ".")))
    head(postscript, 10)
}
this_location <- find_a_postcode("abc")
find_a_postcode <- function(location) {
    postcode_data <- data.frame(read.csv("CleanNIPostcodeData.csv", header = FALSE, na.strings = c("", "NA", " ", ".")))
    head(postcode_data, 10)
}
this_location <- find_a_postcode("abc")
head(my_nicrime_data, 10)
find_a_postcode <- function(location) {
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    head(postcode_data, 10)
}
find_a_postcode <- function(location) {
    location  <- "abc"
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    head(postcode_data, 10)
    return (location)
}
this_location <- find_a_postcode("abc")
find_a_postcode <- function(location) {
    location  <- "abc"
    postcode_data <- read.csv(header = TRUE, "AllNICrimeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    head(postcode_data, 10)
    return (location)
}
this_location <- find_a_postcode("abc")
this_location <- find_a_postcode("abc")
find_a_postcode <- function(location) {
    location  <- "abc"
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    return(postcode_data)
}
this_location <- find_a_postcode("abc")
head(this_location, 10)
find_a_postcode <- function(location) {
    location  <- "abc"
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    new_data <- subset(postcode_data, PrimaryThorfare == location)
    return(new_data)
}
this_location <- find_a_postcode("HIGH ROAD")
this_location
find_a_postcode <- function(location) {
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    new_data <- subset(postcode_data, PrimaryThorfare == location)
    return(new_data)
}
this_location <- find_a_postcode("HIGH ROAD")
this_location
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
# Get all rows with the Primary Thorfare equal to the location
new_data <- subset(postcode_data, PrimaryThorfare == "HIGH ROAD")
head(new_data, 5)
nrow(new_data)
head(new_data$Postcode, 5)
abcd <- which.max(new_data$Postcode)
abcd
abcd <- typical(new_data$Postcode)
abcd <- new_data$Postcode.typical
abcd
new_data$Postcode
mostcommon <- new_data$Postcode
abcd <- mostcommon.typical
abcd
names(which.max(table(mostcommon)))
mostcommon <- new_data$Postcode
# https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
names(which.max(table(mostcommon)))
find_a_postcode <- function(location) {
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    # Get all rows with the Primary Thorfare equal to the location
    new_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most commong postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(new_data$Postcode)))
    return(most_common_postcode)
}
postcode <- find_a_postcode("HIGH ROAD")
postcode
find_a_postcode <- function(location) {
    #Red he postcode file
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most commong postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(most_common_postcode)
}
postcode <- find_a_postcode("HIGH ROAD")
postcode
str(my_nicrime_data)
for (crime_item in my_nicrime_data) {     postcode <- find_a_postcode(crime_item$Location)     location_df <- rbind(location_df, postcode) }
location_df <- NULL
for (crime_item in my_nicrime_data) {     postcode <- find_a_postcode(crime_item$Location)     location_df <- rbind(location_df, postcode) }
location_df <- NULL
for (crime_item in my_nicrime_data) {     postcode <- find_a_postcode(crime_item.Location)     location_df <- rbind(location_df, postcode) }
head(my_nicrime_data, 4)
location_df <- NULL
for (crime_item in my_nicrime_data) {     postcode <- NULL     if (!(is.na(crime_item$Location))) {         postcode <- find_a_postcode(crime_item$Location)     }     location_df <- rbind(location_df, postcode) }
location_df <- NULL
for (crime_item in my_nicrime_data) {
    postcode <- crime_item$Location
    location_df <- rbind(location_df, postcode)
}
crime_item$Location
my_nicrime_data$Location
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (d) Modify the AllNICrimeData dataset so that the Location attribute contains only a street name.  # For example, the attribute value “On or near Westrock Square” should be modified to only contain “Westrock Square”.  # Modify the resultant empty location attributes with a suitable identifier. 
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
my_nicrime_data$Location <- gsub("", NA, my_nicrime_data$Location)
head(my_nicrime_data, 10)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (d) Modify the AllNICrimeData dataset so that the Location attribute contains only a street name.  # For example, the attribute value “On or near Westrock Square” should be modified to only contain “Westrock Square”.  # Modify the resultant empty location attributes with a suitable identifier. 
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
#my_nicrime_data$Location <- gsub("", NA, my_nicrime_data$Location)
head(my_nicrime_data, 10)
replace(my_nicrime_data$Location, my_nicrime_data$Location == "", NA)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
# Function that reads all csv files in a directory,
# into one data frame and returns the result.
combine_results <- function(file_list, directory, columns) {
    # Initialise nicrime_data variable
    # Note: it hasn't been assigned a specific variable type eg string 
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
        , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", ".", "On or near ", "On or near"))
        # Only select attributes we're interested in
        # We don't need the first attribute
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
tail(my_nicrime_data, 20)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (d) Modify the AllNICrimeData dataset so that the Location attribute contains only a street name.  # For example, the attribute value “On or near Westrock Square” should be modified to only contain “Westrock Square”.  # Modify the resultant empty location attributes with a suitable identifier. 
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
head(my_nicrime_data, 10)
find_a_postcode <- function(location) {
    # This function finds the post code for a given location
    #Red he postcode file
    postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(most_common_postcode)
}
location_df <- NULL
for (crime_item in my_nicrime_data) {     postcode <- NULL     if (!(is.na(crime_item$Location))) {         postcode <- find_a_postcode(crime_item$Location)     }     location_df <- rbind(location_df, postcode) }
str(my_nicrime_data)
head(my_nicrime_data$Location, 5)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NULL     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc)     }     location_df <- rbind(location_df, postcode) }
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(most_common_postcode)
}
#Read he postcode file
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NULL     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode) }
str(postcode_data)
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))[, c("PrimaryThorfare", "Postcode")]
str(postcode_data)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NULL     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode) }
head(my_nicrime_data$Location, 10)
head(my_nicrime_data$Location, 10)
tail(my_nicrime_data$Location, 10)
location_df <- NULL
# Loop through the locatins, find a postcode, and add the row
# Note that if the location is NA, then the postcode will be NA also
for (loc in my_nicrime_data$Location) {     postcode <- NA     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode) }
postcode <- find_a_postcode("HIGH ROAD", postcode_data)
postcode
postcode <- find_a_postcode(NA, postcode_data)
postcode
postcode <- find_a_postcode("ABCD", postcode_data)
postcode
postcode <- find_a_postcode("HIGH STREET", postcode_data)
postcode
location_df <- rbind(location_df, postcode)
location_df
location_df <- NULL
postcode <- NA
postcode <- find_a_postcode("HIGH STREET", postcode_data)
postcode
location_df <- rbind(location_df, postcode)
location_df
head(location_df)
head(location_df)
head(location_df)
location_df
postcode
location_df <- NULL
location_df
location_df <- NULL
postcode <- NA
postcode <- find_a_postcode("HIGH STREET", postcode_data)
postcode
location_df <- rbind(location_df, postcode)
location_df
postcode
postcode <- find_a_postcode("HIGH STREET", postcode_data)
postcode
ABC <- "kEVIN bL"
ABC
location_df <- NULL
postcode <- NA
postcode <- find_a_postcode("HIGH STREET", postcode_data)
postcode
location_df
location_df <- rbind(location_df, postcode)
location_df
location_df <- rbind(location_df, postcode)
location_df
location_df[1]
location_df
for (loc in my_nicrime_data$Location) {     postcode <- NA     #if (!(is.na(loc))) {     #    postcode <- find_a_postcode(loc, postcode_data)     #}     #location_df <- rbind(location_df, postcode)     location_df <- rbind(location_df, loc) }
location_df <- apply(my_nicrime_data$Location, 2, find_a_postcode(my_nicrime_data$Location, postcode_data))
location_df <- apply(my_nicrime_data$Location, 2, find_a_postcode, my_nicrime_data$Location, postcode_data)
location_df <- apply(my_nicrime_data$Location, 1, find_a_postcode, my_nicrime_data$Location, postcode_data)
location_df <- apply(my_nicrime_data$Location, 1, find_a_postcode)
apply(my_nicrime_data, MARGIN = 1, FUN = function(x2) find_a_postcode(my_nicrime_data$Location, postcode_data))
warning()
location_df <- apply(my_nicrime_data, MARGIN = 1, FUN = function(my_nicrime_data$Location) find_a_postcode(my_nicrime_data$Location, postcode_data))
locations <- my_nicrime_data$Location
location_df <- apply(my_nicrime_data, MARGIN = 1, FUN = function(locations) find_a_postcode(locations, postcode_data))
location_df <- apply(my_nicrime_data, 2, function(locations) find_a_postcode(locations, postcode_data))
str(postcode_data)
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare = location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(most_common_postcode)
}
location_df <- apply(my_nicrime_data, 2, function(locations) find_a_postcode(locations, postcode_data))
head(location_df,10)
head(locations, 10)
location_df <- apply(locations, 2, function(locations) find_a_postcode(locations, postcode_data))
location_df <- apply(my_nicrime_data, 2, function(locations) find_a_postcode(locations, postcode_data))
head(location_df,10)
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare = location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(most_common_postcode)
}
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
check <- find_a_postcode("ALISBURY PLACE", postcode_data)
check
check <- find_a_postcode("LACE", postcode_data)
chec
check <- find_a_postcode("LACE", postcode_data)
check
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(most_common_postcode)
}
check <- find_a_postcode("LACE", postcode_data)
check
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
check <- find_a_postcode("ALISBURY PLACE", postcode_data)
check
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    return(NA)
}
check <- find_a_postcode("ALISBURY PLACE", postcode_data)
check
check <- find_a_postcode("ALISBURY PLACE", postcode_data)
check
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
location_df <- apply(my_nicrime_data, 2, function(locations) find_a_postcode(locations, postcode_data))
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (most_common_postcode == NULL) {
        most_common_postcode <- NA
    }
    return(most_common_postcode)
}
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (most_common_postcode = NULL) {
        most_common_postcode <- NA
    }
    return(most_common_postcode)
}
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (most_common_postcode == NULL) {
        most_common_postcode <- NA
    }
    return(most_common_postcode)
}
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (most_common_postcode = NULL) {
        most_common_postcode <- NA
    }
    return(most_common_postcode)
}
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    #if (most_common_postcode = NULL) {
    #    most_common_postcode <- NA
    #}
    return(most_common_postcode)
}
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
print("abc")
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    print(location)
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    #if (most_common_postcode = NULL) {
    #    most_common_postcode <- NA
    #}
    return(most_common_postcode)
}
check <- find_a_postcode("SALISBURY PLACE", postcode_data)
check
location_df <- apply(my_nicrime_data, 2, function(locations) find_a_postcode(locations, postcode_data))
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == location)
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    #if (most_common_postcode = NULL) {
    #    most_common_postcode <- NA
    #}
    return(most_common_postcode)
}
location_df <- apply(my_nicrime_data, 1, function(locations) find_a_postcode(locations, postcode_data))
head(locations, 10)
for (loc in my_nicrime_data$Location) {     postcode <- NA     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode)     location_df <- rbind(location_df, loc) }
for (loc in my_nicrime_data$Location) {     postcode <- NA     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode) }
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode) }
head(location_df,10)
nrow(location_df)
str(location_df)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     if (!(is.na(loc))) {         postcode <- find_a_postcode(loc, postcode_data)     }     location_df <- rbind(location_df, postcode) }
head(location_df, 10)
nrow(location_df)
tail(location_df, 10))
tail(location_df, 10)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     location_df <- rbind(location_df, postcode) }
tail(location_df, 10)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     print(loc)     postcode <- find_a_postcode(loc, postcode_data)     location_df <- rbind(location_df, postcode) }
check <- find_a_postcode("Burnside Avenue", postcode_data)
check
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, ignore.case(PrimaryThorfare) == ignore.case(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    #if (most_common_postcode = NULL) {
    #    most_common_postcode <- NA
    #}
    return(most_common_postcode)
}
check <- find_a_postcode("Burnside Avenue", postcode_data)
check
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    #if (most_common_postcode = NULL) {
    #    most_common_postcode <- NA
    #}
    return(most_common_postcode)
}
check <- find_a_postcode("Burnside Avenue", postcode_data)
check
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     print(loc)     postcode <- find_a_postcode(loc, postcode_data)     location_df <- rbind(location_df, postcode) }
head(location_df, 10)
str(location_df)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     location_df <- rbind(location_df, c(postcode)) }
nrow(location_df)
str(location_df)
location_df <- data.frame()
location_df <- data.frame(p_code)
location_df <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     location_df <- rbind(location_df, c(postcode)) }
nrow(location_df)
head(location_df, 10)
str(postcode_data)
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     location_df <- rbind(location_df, c(postcode)) }
nrow(location_df)
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     append(location_postcodes, postcode) }
nrow(location_df)
nrow(location_postcodes)
location_postcodes <- c()
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     append(location_postcodes, postcode) }
nrow(location_postcodes)
location_postcodes
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     #append(location_postcodes, postcode) }
location_postcodes <- c()
location_postcodes
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     #print(postcode)     append(location_postcodes, postcode) }
location_postcodes
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     #print(postcode)     #append(location_postcodes, postcode)     location_postcodes.add(location_postcodes) }
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     #print(postcode)     #append(location_postcodes, postcode)     location_postcodes.add(location_postcodes) }
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     postcode <- find_a_postcode(loc, postcode_data)     #print(postcode)     #append(location_postcodes, postcode)     location_postcodes <- c(location_postcodes,postcode) }
location_postcodes
nrow(location_postcodes)
str(location_postcodes)
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     location_postcodes <- c(location_postcodes,postcode) }
location_postcodes
location_postcodes = []
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     location_postcodes.append(postcode) }
ouput <- NULL
ouput <- sapply(my_nicrime_data, function(v) find_a_postcode(my_nicrime_data$Location, postcode_data))
ouput
ouput <- NULL
ouput <- sapply(my_nicrime_data$Location, function(v) find_a_postcode(my_nicrime_data$Location, postcode_data))
ouput
ouput <- NULL
ouput <- sapply(my_nicrime_data$Location, function(v) find_a_postcode(my_nicrime_data$Location, postcode_data))
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     location_postcodes.append(postcode) }
location_postcodes <- NULL
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     #location_postcodes.append(postcode)     append(location_postcodes, postcode) }
location_postcodes
location_postcodes <- ""
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     #location_postcodes.append(postcode)     append(location_postcodes, postcode) }
location_postcodes
location_postcodes <- NULL
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- vector(, 10)
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- vector(, 10)
location_postcodes
location_postcodes <- vector(, nrow(my_nicrime_data))
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- vector(, nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- vector(, nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- vector(, nrow(my_nicrime_data))
location_postcodes
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
head(location_postcodes, 10)
location_postcodes <- character(nrow(my_nicrime_data))
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     if (postcode == NULL) {         postcode <= ""     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     if (postcode = NULL) {         postcode <= ""     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code      <- find_a_postcode(loc, postcode_data)     if (is.null(postcode)) {         postcode <- ""     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
count = 1
for (loc in my_nicrime_data$Location) {     postcode <- NA     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     if (is.null(postcode)) {         postcode <= ""     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
count = 1
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     if (is.null(postcode)) {         postcode <= ""     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     if (is.null(postcode)) {         postcode <= ""     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     if (is.null(postcode)) {         postcode <- NA     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     print(postcode)     if (is.null(postcode)) {         postcode <- NA     }     # Add to the vector     #location_postcodes.append(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- NULL
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     if (is.null(postcode)) {         postcode <- NA     }     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes[0]
location_postcodes(0)
location_postcodes(1)
location_postcodes
location_postcodes <- NULL
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     if (is.null(postcode) || postcode == "") {         postcode <- NA     }     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes
find_a_postcode <- function(location, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    return(most_common_postcode)
}
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes
tail(my_nicrime_data, 5)
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     print( count + " " + postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- NULL
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     print( count & " " & postcode)     location_postcodes[count] <- postcode     count = count + 1 }
location_postcodes <- NULL
location_postcodes <- character(nrow(my_nicrime_data))
count = 0
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     print(count)     print(postcode)     location_postcodes[count] <- postcode     count = count + 1 }
tail(location_postcodes, 5)
my_nicrime_data(1)
my_nicrime_data[1]
my_nicrime_data[1,1]
my_nicrime_data[1,2]
my_nicrime_data[1,3]
my_nicrime_data[0,3]
my_nicrime_data[1,3]
head(my_nicrime_data,1)
str(my_nicrime_data)
my_nicrime_data$Postcode
str(my_nicrime_data)
my_nicrime_data$Postcode <- NULL
str(my_nicrime_data)
my_nicrime_data$Postcode <- ""
str(my_nicrime_data)
str(my_nicrime_data)
count = 1
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     print(count)     print(postcode)     #Update the postcode in the data frame     location_postcodes[count,5] <- postcode     count = count + 1 }
location_postcodes(1,5)
location_postcodes(1,4)
location_postcodes[1,4]
my_nicrime_data[1, 3]
my_nicrime_data[1, 4]
my_nicrime_data[1, 5]
my_nicrime_data[1, 5] <- "abc"
my_nicrime_data[1, 5]
count = 1
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     print(count)     print(postcode)     #Update the postcode in the data frame     location_postcodes[count, 5] <- postcode     count = count + 1 }
my_nicrime_data$Postcode[1]
count = 1
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #if (is.null(postcode) || postcode == "") {     #    postcode <- NA     #}     print(count)     print(postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
count = 1
for (loc in my_nicrime_data$Location) {     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
location_postcodes[1,4]
str(my_nicrime_data)
head(my_nicrime_data, 5)
tail(my_nicrime_data, 5)
my_nicrime_data[1, 5]
my_nicrime_data[1000, 5]
my_nicrime_data[10000, 5]
my_nicrime_data[100000, 5]
my_nicrime_data[200000, 5]
count
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     # Get the post code     postcode <- find_a_postcode(loc, postcode_data)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
str(postcode_data)
str(my_nicrime_data)
my_nicrime_data[56999, 5]
my_nicrime_data[57000, 5]
my_nicrime_data[57001, 5]
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode, postcode_data)
find_a_postcode <- function(location, postcode, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    return(most_common_postcode)
}
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode, postcode_data)
str(postcode_data)
find_a_postcode <- function(location, postcode, postcode_data) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    return(most_common_postcode)
}
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode, postcode_data)
str(my_nicrime_data)
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode, postcode_data = postcode_data)
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode, postcode_data = postcode_data)
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode, postcode_data = "postcode_data")
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    return(most_common_postcode)
}
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode)
my_nicrime_data[57001, 5]
my_nicrime_data[57000, 5]
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    print(postcode)
    return(most_common_postcode)
}
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode)
count <- 1
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    print(count)
    count = count + 1
    postcode <- most_common_postcode
    return(most_common_postcode)
}
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode)
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    most_common_postcode <- names(which.max(table(location_data$Postcode)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode)
my_nicrime_data[57000, 5]
my_nicrime_data[97000, 5]
my_nicrime_data[397000, 5]
my_nicrime_data[197000, 5]
12my_nicrime_data[147000, 5]
my_nicrime_data[147000, 5]
my_nicrime_data[107000, 5]
my_nicrime_data[97000, 5]
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
count <- 1
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    print(len(specific_postcodes))
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    print(nrow(specific_postcodes))
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
    print(nrow(specific_postcodes))
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    specific_postcodes
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
count <- 1
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    print(specific_postcodes)
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    #location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    #specific_postcodes <- location_data$Postcode
    #most_common_postcode <- names(which.max(table(specific_postcodes)))
    most_common_postcode <- names(which.max(table(subset(postcode_data, PrimaryThorfare == toupper(location)))))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
my_nicrime_data[250, 5]
my_nicrime_data[240, 5]
head(my_nicrime_data, 5)
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
head(my_nicrime_data, 5)
count <- 1
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    #return(most_common_postcode)
}
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <= NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
head(my_nicrime_data, 5)
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
str(my_nicrime_data)
head(my_nicrime_data, 10)
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
head(my_nicrime_data, 10)
str(my_nicrime_data)
head(my_nicrime_data, 10)
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
head(my_nicrime_data, 10)
nicrime_file <- data.frame(read.csv("NI Crime Data\2015-01\2015-01-northern-ireland-street.csv", header = FALSE,     na.strings = c("", "NA", " ", ".")))
nicrime_file <- data.frame(read.csv("NI Crime Data/2015-01/2015-01-northern-ireland-street.csv", header = FALSE,     na.strings = c("", "NA", " ", ".")))
head(my_nicrime_data, 10)
    na.strings = c("", "NA", " ", ".", "On or near ", "On or near")))
    na.strings = c("", "NA", " ", ".", "On or near ", "On or near")))
    na.strings = c("", "NA", " ", ".")))
    na.strings = c("", "NA", " ", ".")))
    na.strings = c("", "NA", " ", ".")))
    na.strings = c("", "NA", " ", ".")))
nicrime_file <- data.frame(read.csv("NI Crime Data/2015-01/2015-01-northern-ireland-street.csv", header = FALSE, na.strings = c("", "NA", " ", ".")))
                header = FALSE, na.strings = c("", "NA", " ", ".")))
nicrime_file <- data.frame(read.csv("NI Crime Data/2015-01/2015-01-northern-ireland-street.csv"
                , header = FALSE, na.strings = c("", "NA", " ", ".")))
nicrime_file <- data.frame(read.csv("NI Crime Data/2015-01/2015-01-northern-ireland-street.csv"
                , header = FALSE, na.strings = c("", "NA", " ", ".", "On or near ", "On or near")))
head(my_nicrime_data, 10)
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # and populates it in the postcode
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    return(postcode)
}
nrow(nicrime_file)
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode)
str(my_nicrime_data)
my_nicrime_data$Postcode <- ""
str(my_nicrime_data)
mapply(find_a_postcode, my_nicrime_data$Location, my_nicrime_data$Postcode)
nicrime_file <- NULL
nicrime_file <- data.frame(read.csv("NI Crime Data/2015-01/2015-01-northern-ireland-street.csv"
                , header = FALSE, na.strings = c("", "NA", " ", ".", "On or near ", "On or near")))
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
my_nicrime_data$Postcode <- NULL
str(my_nicrime_data)
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- data.frame(read.csv("NI Crime Data/2015-01/2015-01-northern-ireland-street.csv"
                , header = FALSE, na.strings = c("", "NA", " ", ".", "On or near ", "On or near")))
nrow(nicrime_file_jan2015)
str(nicrime_file_jan2015)
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- combine_results(csv_file_list, "NI Crime Data/2015/", myColumns)
csv_file_list <- list.files(path = "NI Crime Data/2015", pattern = "*.csv", recursive = TRUE)
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- combine_results(csv_file_list, "NI Crime Data/2015/", myColumns)
nrow(nicrime_file_jan2015)
csv_file_list <- list.files(path = "NI Crime Data/2015", pattern = "*.csv", recursive = TRUE)
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- combine_results(csv_file_list, "NI Crime Data", myColumns)
nrow(nicrime_file_jan2015)
csv_file_list
csv_file_list <- list.files(path = "NI Crime Data/2015", pattern = "*.csv", recursive = FALSE)
csv_file_list
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
csv_file_list
csv_file_list[1]
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- combine_results(csv_file_list[1], "NI Crime Data", myColumns)
csv_file_list[1]
nicrime_file_jan2015 <- combine_results(csv_file_list[1], "NI Crime Data/", myColumns)
nrow(nicrime_file_jan2015)
head(my_nicrime_data, 10)
nicrime_file_jan2015 <- combine_results(csv_file_list[1], "NI Crime Data/", myColumns)
csv_file_list <- list.files(path = "NI Crime Data/2015", pattern = "*.csv", recursive = FALSE)
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- combine_results(csv_file_list[1], "NI Crime Data/", myColumns)
# (a) Using R, amalgamate all of the crime data from each csv file into one dataset.  # (b) Modify the structure of the newly created AllNICrimeData csv file and remove the following attributes: # CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context. # Show the structure of the modified file.
csv_file_list <- list.files(path = "NI Crime Data", pattern = "*.csv", recursive = TRUE)
csv_file_list[1]
# Function that reads all csv files in a directory, into one data frame and returns the result.
# Pass in the file list, directory and required columns as this function can be re-used again
# Note also that "On or near" is being set as a Missing Value NA
combine_results <- function(file_list, directory, columns) {
    all_file_data <- NULL
    for (csv_file in file_list) {
        # Read each of the csv files in turn and skip the first line of data as it
        # contains headings within the csv file
        nicrime_file <- read.csv(header = TRUE, paste(directory, csv_file, sep = "")
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", ".", "On or near ", "On or near"))
        data_of_interest <- nicrime_file[columns]
        # append vertically to the all_file_data data frame
        all_file_data <- rbind(all_file_data, data_of_interest)
    }
    # Return the concatenated result
    return(all_file_data)
}
# Call the function and return the result to a data frame
#myColumns <- c("Month", "Longitude", "Latitude", "Location")
myColumns <- c(5:7,10)
my_nicrime_data <- combine_results(csv_file_list, "NI Crime Data/", myColumns)
str(my_nicrime_data)
# Save this dataset into a csv file called AllNICrimeData. 
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
# Count and show the number of rows in the AllNICrimeData dataset.
num_rows <- nrow(my_nicrime_data)
num_rows
# (c) Factorise the Crime type attribute. Show the modified structure.  crime_type <- factor(my_nicrime_data$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"
    , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"
    , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type
str(my_nicrime_data)
# (d) Modify the AllNICrimeData dataset so that the Location attribute contains only a street name.  # For example, the attribute value “On or near Westrock Square” should be modified to only contain “Westrock Square”.  # Modify the resultant empty location attributes with a suitable identifier. 
head(my_nicrime_data, 10)
my_nicrime_data$Location <- gsub("On or near ", "", my_nicrime_data$Location)
head(my_nicrime_data, 10)
nicrime_file_jan2015 <- NULL
nicrime_file_jan2015 <- combine_results(csv_file_list[1], "NI Crime Data/", myColumns)
nrow(nicrime_file_jan2015)
str(nicrime_file_jan2015)
nicrime_file_jan2015$Crime.type <- crime_type
crime_type <- factor(nicrime_file_jan2015$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"     , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"     , "Vehicle crime", "Violence and sexual offences")) my_nicrime_data$Crime.type <- crime_typ
crime_type <- factor(nicrime_file_jan2015$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"     , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"     , "Vehicle crime", "Violence and sexual offences")) my_nicrime_data$Crime.type <- crime_type
crime_type_jan <- factor(nicrime_file_jan2015$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"     , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"     , "Vehicle crime", "Violence and sexual offences"))
my_nicrime_data$Crime.type <- crime_type_jan
crime_type_jan <- NULL
crime_type_jan <- factor(nicrime_file_jan2015$Crime.type, order = FALSE, levels =     c("Anti-social behaviour", "Bicycle theft", "Burglary", "Criminal damage and arson", "Drugs", "Other crime"     , "Other theft", "Possession of weapons", "Public order", "Robbery", "Shoplifting", "Theft from the person"     , "Vehicle crime", "Violence and sexual offences"))
nicrime_file_jan2015$Crime.type <- crime_type_jan
str(nicrime_file_jan2015)
#Read the postcode file.  Only the PrimaryThorfare and Postcode columns are required
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))[, c("PrimaryThorfare", "Postcode")]
nicrime_file_jan2015$Postcode <- NULL
str(nicrime_file_jan2015)
str(nicrime_file_jan2015)
head(nicrime_file_jan2015, 10)
nicrime_file_jan2015$Postcode <- NULL
str(nicrime_file_jan2015)
find_a_postcode <- function(location, postcode) {
    # This function finds the post code for a given location
    # and populates it in the postcode
    # Get all rows with the Primary Thorfare equal to the location
    # PrimaryThorfare is upper case, so location needs to be upper case
    location_data <- subset(postcode_data, PrimaryThorfare == toupper(location))
    # https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
    # Get the most common postcode. Note code below found at url above
    specific_postcodes <- location_data$Postcode
    most_common_postcode <- names(which.max(table(specific_postcodes)))
    if (is.null(most_common_postcode)) {
        most_common_postcode <- NA
    }
    postcode <- most_common_postcode
    return(postcode)
}
mapply(find_a_postcode, nicrime_file_jan2015$Location, nicrime_file_jan2015$Postcode)
head(nicrime_file_jan2015, 10)
nicrime_file_jan2015$Postcode <- ""
str(my_nicrime_data)
nicrime_file_jan2015$Postcode <- ""
str(nicrime_file_jan2015)
mapply(find_a_postcode, nicrime_file_jan2015$Location, nicrime_file_jan2015$Postcode)
nicrime_file_jan2015$Location <- gsub("On or near ", "", my_nicrime_data$Location)
nicrime_file_jan2015$Location <- gsub("On or near ", "", nicrime_file_jan2015$Location)
mapply(find_a_postcode, nicrime_file_jan2015$Location, nicrime_file_jan2015$Postcode)
head(nicrime_file_jan2015, 10)
for (loc in my_nicrime_data$Location) {     print(loc)     postcode <- NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
count = 1
for (loc in my_nicrime_data$Location) {     print(loc)     postcode <- NULL     # Get the post code     postcode <- find_a_postcode(loc, postcode)     #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
count = 1
for (loc in my_nicrime_data$Location) {     print(count)     postcode <- NA     # Get the post code     if (!is.na(postcode_data)) {         postcode <- find_a_postcode(loc, postcode)     }        #Update the postcode in the data frame     my_nicrime_data$Postcode[count] <- postcode     count = count + 1 }
count = 1
for (loc in nicrime_file_jan2015$Location) {     print(count)     postcode <- NA     # Get the post code     if (!is.na(postcode_data)) {         postcode <- find_a_postcode(loc, postcode)     }        #Update the postcode in the data frame     nicrime_file_jan2015$Postcode[count] <- postcode     count = count + 1 }
head(nicrime_file_jan2015, 10)
tail(nicrime_file_jan2015, 10)
head(nicrime_file_jan2015, 10)
# Use the index in count to update the Postcode attribute
count = 1
for (loc in nicrime_file_jan2015$Location) {     postcode <- NA     # Get the post code     if (!is.na(postcode_data)) {         postcode <- find_a_postcode(loc, postcode)     }        #Update the postcode in the data frame     nicrime_file_jan2015$Postcode[count] <- postcode     count = count + 1 }
head(nicrime_file_jan2015, 10)
tail(nicrime_file_jan2015, 10)
head(nicrime_file_jan2015, 10)
str(nicrime_file_jan2015)
head(nicrime_file_jan2015, 10)
head(nicrime_file_jan2015, 5)
revgeocode(c(long, lat))
install.packages("ggmap")
revgeocode(c(long, lat))
library(ggmap)
revgeocode(c(long, lat))
lat <- 54.767826 long <- -5.749253
revgeocode(c(long, lat))
citation('ggmap')
location = revgeocode(c(long, lat)) location
lat <- 54.76782 long <- -5.74925 location = revgeocode(c(long, lat)) location
lat <- 54.7678 long <- -5.7492 location = revgeocode(c(long, lat)) location
lat <- 54.767 long <- -5.749 location = revgeocode(c(long, lat)) location
lat <- 54.76 long <- -5.74 location = revgeocode(c(long, lat)) location
lat <- 54.7 long <- -5.7 location = revgeocode(c(long, lat)) location
lat <- 54.76 long <- -5.74
lat <- 54.76 long <- -5.74 location = revgeocode(c(long, lat)) location
lat <- 54.76 long <- -5.749253 location = lat <- 54.76 long <- -5.749253 location = revgeocode(c(long, lat)) location
str(my_nicrime_data)
str(my_nicrime_data)
my_nicrime_data[my_nicrime_data$Longitude %like% "-5.74925",]
irisSubset <- my_nicrime_data[grep("-5.74925", my_nicrime_data$Longitude),]
head(iris3, 10)
irisSubset <- my_nicrime_data[grep("-5.74925", my_nicrime_data$Location),] head(iris3, 10)
irisSubset <- my_nicrime_data[grep("-5.74925", my_nicrime_data$Location),] head(irisSubset, 10)
irisSubset <- my_nicrime_data[grep("-5.7", my_nicrime_data$Location),] head(irisSubset, 10)
abcd <- my_nicrime_data[grep("-5.7", my_nicrime_data$Location),] head(abcd, 10)
abcd <- my_nicrime_data[grep("-5.7", my_nicrime_data$Longitude),] head(abcd, 10)
grepl("-5.7", df$words) abcd <- my_nicrime_data[grep("-5.749", my_nicrime_data$Longitude),]
grepl("-5.7", df$words) abcd <- my_nicrime_data[grep("-5.7", my_nicrime_data$Longitude),]
abcd <- my_nicrime_data[grep("-5.7", my_nicrime_data$Longitude),] abcd
abcd <- my_nicrime_data[grep("-5.74925", my_nicrime_data$Longitude),] abcd
abcd <- my_nicrime_data[grep("-5.749", my_nicrime_data$Longitude),] abcd
abcd <- my_nicrime_data[grep("-5.749", my_nicrime_data$Longitude),] abcd <- my_nicrime_data[grep("54.767", abcd$Latitude),] abcd
abcd <- my_nicrime_data[grep("-5.749", my_nicrime_data$Longitude),] abcd <- abcd[grep("54.767", abcd$Latitude),] abcd
abcd <- my_nicrime_data[grep("-5.74", my_nicrime_data$Longitude),] abcd <- abcd[grep("54.76", abcd$Latitude),] abcd
name <= "Kevin Blake" nchar(name)
name <- "Kevin Blake" nchar(name)
substr(name, 1, 5)
head(my_nicrime_data, 4)
my_nicrime_data[1]
head(nicrime_file_jan2015, 4)
nicrime_file_jan2015[1,1]
nicrime_file_jan2015[1,1:5]
nicrime_file_jan2015[2,1:5]
my_row <- icrime_file_jan2015[2, 1:5] my_row
my_row <- nicrime_file_jan2015[2, 1:5] my_row
my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) long <- substr(my_row$Longitude, 1, length - 3) lat <- substr(my_row$Latitude, 1, length - 3) df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),] df_longitude_latitude <- abcd[grep(lat, abcd$Latitude),]
df_longitude
count = 1 found_location = "" while (count < 6 && found_location == "") {     count = count + 1 }
my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- abcd[grep(lat, abcd$Latitude),]     print(count)     print(df_longitude_latitude$Location)     count = count + 1 }
count = 1 found_location = "" my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- abcd[grep(lat, abcd$Latitude),]     print(count)     print(df_longitude_latitude$Location)     count = count + 1 }
count = 1 found_location = "" my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- abcd[grep(lat, abcd$Latitude),]     print(count)     print(df_longitude_latitude$Location)     count = count + 1     length = length - 1 }
while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- abcd[grep(lat, abcd$Latitude),]     print(count)     print(df_longitude_latitude$Location)     print(long)     print(lat)     count = count + 1     length = length - 1 }
count = 1 found_location = "" my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- abcd[grep(lat, abcd$Latitude),]     print(count)     print(df_longitude_latitude$Location)     print(long)     print(lat)     count = count + 1     length = length - 1 }
count = 1 found_location = "" my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- df_longitude[grep(lat, abcd$Latitude),]     print(count)     print(df_longitude_latitude$Location)     print(long)     print(lat)     count = count + 1     length = length - 1 }
count = 1 found_location = "" my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- df_longitude[grep(lat, df_longitude$Latitude),]     print(count)     print(df_longitude_latitude$Location)     print(long)     print(lat)     count = count + 1     length = length - 1 }
count = 1 found_location = "" my_row <- nicrime_file_jan2015[2, 1:5] length <- nchar(my_row$Longitude) while (count < 6 && found_location == "") {     long <- substr(my_row$Longitude, 1, length - 1)     lat <- substr(my_row$Latitude, 1, length - 1)     df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]     df_longitude_latitude <- df_longitude[grep(lat, df_longitude$Latitude),]     for (loc in nicrime_file_jan2015$Location) {         if (!(is.na(loc))) {             found_location <- loc         }     }     print(count)     print(found_location)     print(long)     print(lat)     count = count + 1     length = length - 1 }
head(nicrime_file_jan2015, 10)
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    # 
    if (is.na(datarow$Location)) {
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
tidy_location <- function(my_row) {     while_count = 1     found_location = ""     my_row <- nicrime_file_jan2015[2, 1:5]     length <- nchar(my_row$Longitude)     print("here")     # stopping condition is run 5 times or if a location is found     while (while_count < 6 && found_location == "") {         # take the end character from the longitde and latidute         long <- substr(my_row$Longitude, 1, length - 1)         lat <- substr(my_row$Latitude, 1, length - 1)         # Get the longitudes and latitudes that have 1 character less         df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]         df_longitude_latitude <- df_longitude[grep(lat, df_longitude$Latitude),]         # loop through the data frame, and store the location         for (loc in nicrime_file_jan2015$Location) {             if (!(is.na(loc))) {                 found_location <- loc             }         }         # Decrement count and length for next time in loop         while_count = while_count + 1         length = length - 1     }     return(found_location) }
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    # 
    if (is.na(datarow$Location)) {
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow$Location
    # 
    if (is.na(location)) {
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(count)
    location <- datarow$Location
    # 
    if (is.na(location)) {
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow$Location
    # 
    if (is.na(location)) {
    print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow$Location
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(datarow)
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(datarow[1])
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(datarow[3])
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(datarow[count])
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(datarow[count,2])
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
head(nicrime_file_jan2015, 10)
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    print(datarow[count])
    location <- datarow$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow$Location[count]
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[count, 3]
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[3]
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[count]
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[count]$Location
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[count]$Location
    print(location)
    # 
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[count]
    print(location)
    # 
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[0]
    print(location)
    # 
    count = count + 1
}
count = 1
for (datarow in nicrime_file_jan2015) {
    new_location <- ""
    location <- datarow[1]
    print(location)
    # 
    count = count + 1
}
count = 1
for (location in nicrime_file_jan2015$Location) {
    print(location)
    # 
    count = count + 1
}
count = 1
for (location in nicrime_file_jan2015$Location) {
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
head(nicrime_file_jan2015, 10)
count = 1
for (location in nicrime_file_jan2015$Location) {
    print(location)
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
count = 1
for (location in nicrime_file_jan2015$Location) {
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
tidy_location <- function(my_row) {     while_count = 1     found_location = ""     my_row <- nicrime_file_jan2015[2, 1:5]     length <- nchar(my_row$Longitude)     # stopping condition is run 5 times or if a location is found     while (while_count < 6 && found_location == "") {         # take the end character from the longitde and latidute         long <- substr(my_row$Longitude, 1, length - 1)         lat <- substr(my_row$Latitude, 1, length - 1)         # Get the longitudes and latitudes that have 1 character less         df_longitude <- my_nicrime_data[grep(long, my_nicrime_data$Longitude),]         df_longitude_latitude <- df_longitude[grep(lat, df_longitude$Latitude),]         # loop through the data frame, and store the location         for (loc in nicrime_file_jan2015$Location) {             if (!(is.na(loc))) {                 found_location <- loc             }         }         # Decrement count and length for next time in loop         while_count = while_count + 1         length = length - 1     }     return(found_location) }
count = 1
for (location in nicrime_file_jan2015$Location) {
    # 
    if (is.na(location)) {
        print(count)
        new_location <- tidy_location(datarow)
        #Update the postcode in the data frame
        nicrime_file_jan2015$Location[count] <- new_location
    }
    count = count + 1
}
num_modification = 1654
print(num_modification)
head(nicrime_file_jan2015, 10)
tail(nicrime_file_jan2015, 10)
head(nicrime_file_jan2015, 10)
str(nicrime_file_jan2015)
location_postcodes <- character(nrow(my_nicrime_data))
nicrime_file_jan2015$Town <- "" nicrime_file_jan2015$Count <- "" str(nicrime_file_jan2015)
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))[, c("Town", "Count", "Postcode")]
#Read the postcode file.  Only the Town, County and Postcode columns are required
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))[, c("Town", "County", "Postcode")]
head(postcode_data, 5)
str(nicrime_file_jan2015)
head(nicrime_file_jan2015, 10)
colnames(nicrime_file_jan2015)[colnames(nicrime_file_jan2015) == 'Count'] <- 'County'
str(nicrime_file_jan2015)
thisPostcode <- subset(postcode_data, Postcode == "BT487BZ"))
thisPostcode <- subset(postcode_data, Postcode == "BT487BZ")
head(thisPostcode,4)
thisPostcode[1]
thisPostcode[1,2]
thisPostcode[1, 2] thisPostcode[1, 3]
thisPostcode[1, 1] thisPostcode[1, 2]
head(nicrime_file_jan2015, 10)
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    print(count)
    # Only process empty locations
    if (is.na(pcode)) {
        postcode_data <- subset(postcode_data, Postcode == pcode)
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- postcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- postcode_data[1, 2]
    }
    count = count + 1
}
head(nicrime_file_jan2015, 10)
thisPostcode <- subset(postcode_data, Postcode == "BT179RZ") thisPostcode[1, 1] thisPostcode[1, 2]
thisPostcode <- subset(postcode_data, Postcode == "BT179RZ") thisPostcode[1, 1] thisPostcode[1, 2]
head(nicrime_file_jan2015, 10)
thisPostcode <- subset(postcode_data, Postcode == "BT17 9RZ") thisPostcode[1, 1] thisPostcode[1, 2]
head(thisPostcode,4)
thisPostcode <- subset(postcode_data, Postcode == "BT86JB") thisPostcode[1, 1] thisPostcode[1, 2] head(thisPostcode,4)
head(postcode_data, 10)
#Read the postcode file.  Only the Town, County and Postcode columns are required
postcode_data <- read.csv(header = TRUE, "CleanNIPostcodeData.csv",
            , stringsAsFactors = FALSE, na.strings = c("", "NA", " ", "."))[, c("Town", "County", "Postcode")]
head(postcode_data, 10)
thisPostcode <- subset(postcode_data, Postcode == "BT86JB") thisPostcode[1, 1] thisPostcode[1, 2] head(thisPostcode,4)
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    print(count)
    # Only process empty locations
    if (is.na(pcode)) {
        pcode_data <- subset(postcode_data, Postcode == pcode)
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- pcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- pcode_data[1, 2]
    }
    count = count + 1
}
head(nicrime_file_jan2015, 10)
thisPostcode <- subset(postcode_data, Postcode == "BT179RZ") thisPostcode[1, 1] thisPostcode[1, 2]
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    # Only process empty locations
    if (is.na(pcode)) {
        pcode_data <- subset(postcode_data, Postcode == pcode)
        print(pcode_data[1, 1])
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- pcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- pcode_data[1, 2]
    }
    count = count + 1
}
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    # Only process empty locations
    if (is.na(pcode)) {
        pcode_data <- subset(postcode_data, Postcode == pcode)
        print(pcode_data)
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- pcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- pcode_data[1, 2]
    }
    count = count + 1
}
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    # Only process empty locations
    if (is.na(pcode)) {
        pcode_data <- subset(postcode_data, Postcode == pcode)
        print(pcode)
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- pcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- pcode_data[1, 2]
    }
    count = count + 1
}
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    # Only process empty locations
    if (!(is.na(pcode))) {
        pcode_data <- subset(postcode_data, Postcode == pcode)
        print(pcode)
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- pcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- pcode_data[1, 2]
    }
    count = count + 1
}
head(nicrime_file_jan2015, 10)
count = 1
for (pcode in nicrime_file_jan2015$Postcode) {
    # Only process empty locations
    if (!(is.na(pcode))) {
        pcode_data <- subset(postcode_data, Postcode == pcode)
        print(count)
        #Update the location with the new location
        nicrime_file_jan2015$Town[count] <- pcode_data[1, 1]
        nicrime_file_jan2015$County[count] <- pcode_data[1, 2]
    }
    count = count + 1
}
head(nicrime_file_jan2015, 10)
str(nicrime_file_jan2015)
write.csv(str(nicrime_file_jan2015) , file = "FinalNICrimeData.csv", row.names = FALSE, na = "")
head(nicrime_file_jan2015, 10)
write.csv(str(nicrime_file_jan2015) , file = "FinalNICrimeData.csv", row.names = FALSE, na = "")
write.csv(postcode_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
write.csv(nicrime_file_jan2015, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
head(nicrime_file_jan2015, 10)
tail(nicrime_file_jan2015, 10)
head(nicrime_file_jan2015, 10)
write.csv(nicrime_file_jan2015, file = "AllNICrimeData.csv", row.names = TRUE, na = "")
str(nicrime_file_jan2015)
write.csv(nicrime_file_jan2015, file = "AllNICrimeData.csv", row.names = TRUE, na = "")
write.csv(nicrime_file_jan2015, file = "FinalNICrimeData.csv", row.names = TRUE, na = "")
write.csv(nicrime_file_jan2015, file = "FinalNICrimeData.csv", row.names = FALSE, na = "")
write.csv(my_nicrime_data, file = "AllNICrimeData.csv", row.names = FALSE, na = "")
head(nicrime_file_jan2015, 10)
strabane_data <- subset(nicrime_file_jan2015, Town == "STRABANE")
head(strabane_data,10)
head(nicrime_file_jan2015, 10)
head(strabane_data,10)
str(strabane_data)
