x <- 2
y <- 5
x
y
# x = 2 x <- 2 y <- 5 #show the contents of x x y
x -> 10
x <- 10
y
z <- 22.3
z
a <- b <- 8
a
x <- a + b
x
rm(a)
a
class(z)
is.numeric(b)
is.integer(z)
xChar
xChar <- "hello"
xChar
nchar(xChar)
date1 <- "2018-03-08"
date1
date2 <- as.POSIXct("2018-03-08")
class(date2)
k <- TRUE
class(k)
vectorX <- c(10,150, 2, 3 55.6)
vectorX <- c(10,150, 2, 3, 55.6)
vectorX
class(vectorX)
vectorX <- c(10, 150, 2, 3, 55)
vectorX
vectorX <- c(10.0, 150, 2, 3, 55)
vectorX
vectorX <- c(10.1, 150, 2, 3, 55)
vectorX
1/vectorX
vectorY <- c(vectorX, vectorX, 1, 2, 3)
vectorY
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_course_zip("c:/swirl_courses-master.zip",multi = TRUE,which_course = "R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y -> x - 3
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, c)
c(z, 555, z)
z * 2 + 100
my_sqrt <- z - 1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_dif <- z / my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
(z * 2 + 100)
(z * 2 + 1000)
z * 2 + 1000
my_div
swirl()
library(swirl)
swirl()
swirl()
getwd()
ls()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
list.files
?list.files
args()
args(list.files)
old.dir <- getwd()
dir.create(testdir)
getwd()
dir.create(testdir)
dir.create(testdir)
bye()
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
y <- c(x, 0, x)
z <- 2 * x + 1 + 1
z
yz <- 2 * x + y + 1
z
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
y <- c(x, 0, x)
z <- 2 * x + y + 1
z
z
z <- c(1:3, NA); result <- is.na(z)
z <- c(1:3, NA)
result <- is.na(z)
result
vec1 -> ["Hockey", "Football", "Baseball", "Curling", "Rugby", "Hurling", "Basketball", "Tennis", "Cricket", "Lacrosse"]
vec1 -> c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Hurling", "Basketball", "Tennis", "Cricket", "Lacrosse")
vec1 <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Hurling", "Basketball", "Tennis", "Cricket", "Lacrosse")
vec2 <- c("Hockey", "Lacrosse", "Hockey", "Water Polo", "Hockey", "Lacrosse")
vec2 <- vec2 + vec1
vec2
vec2 <- c(vec2,vec1)
vec2
vec2_factor <- as.factor(vec2)
vec2_factor
swirl()
bye()
main()
swirl()
2
bye()
swirl()
num_vect <- c(0.5,55,-10,6)
tf == [num_vect < 1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char -> c("My","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Kevin")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
vec2_factor
vec1 <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Hurling", "Basketball", "Tennis", "Cricket", "Lacrosse")
vec2 <- c("Hockey", "Lacrosse", "Hockey", "Water Polo", "Hockey", "Lacrosse")
vec2 <- c(vec2,vec1)
vec2
vec2_factor <- as.factor(vec2)
vec2_factor
x <- c(34, 56, 87, NA, 4, 77, NA, 21, NA, 39)
sum(is.na(x))
count(is.na(x))
length(is.na(x))
count.fields(is.na(x))
is.na(x)
y <- is.na(x)
y
y * 1
a <- c(1,2,4,5,6)
b <- c(3,2,4,1,9)
cbind(a,b)
rbind(a,b)
my_data = read.csv("Diabetes-md.csv", header = TRUE)
str(my_data)
class(my_data)
library(swirl)
swirl()
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
my_vector <- c(1:20)
info()
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- 1:20 dim(my_matrix2) <- (4,5)
my_matrix2 <- 1:20
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
colnames <- c("Manager", "This Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5")
dates <- c("10/15/18", "01/11/18", "10/21/18", "10/28/18", "05/01/18")
country <- c("US", "US", "IRL", "IRL", "IRL")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, , 2)
q4 <- c(5, 5, 5, NA, 2)
Q5 <- c(5, 5, 2, NA, 1)
my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5)
q5 <- c(5, 5, 2, NA, 1)
my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5)
colnames(my_data) <- colnames
colnames(my_data) <- cnames
cnames <- c("Manager", "This Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5")
colnames(my_data) <- cnames
cnames <- c( "This Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5")
colnames(my_data) <- cnames
my_data
head(my_data)
str(my_data)
head(my_data, 2)
my_data$Age[my_data$Age == 99] <- NA        #re-code to be NA because 99 is wrong
my_data
my_data$AgeCat[my_data$Age >= 45] <- "Elder"
my_data$AgeCat[my_data$Age >= 26 & my_data$Age <= 44] <- "Middle Aged"
my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged"
my_data$AgeCat[my_data$Age < 26] <- "Young"
my_data$AgeCat[is.na(my_data$Age)] <- "TEstr"
my_data
AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder"))
AgeCat
my_data$AgeCat <- AgeCat
my_data
my_data$AgeCat
AgeCat
my_data = read.csv("Diabetes-md.csv", header = TRUE)
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE))
str(my_data)
class(my_data)
cnames <- c("Patient name", "NI address", "Type", "Age", "Health status")
colnames(my_data) <- cnames
class(my_data)
str(my_data)
TypeCat <- factor(my_data$TypeCat, order = TRUE, levels = c("Type 1", "Type 2"))
str(my_data)
TypeCat
my_data$TypeCat <- TypeCat
TypeCat
my_data$TypeCat <- TypeCat
colnames(my_data) <- cnames
TypeCat <- factor(my_data$TypeCat, order = TRUE, levels = c("Type 1", "Type 2"))
TypeCat
my_data$TypeCat <- TypeCat
str(my_data)
TypeCat <- factor(my_data$TypeCat, order = TRUE, levels = c("Type 1", "Type 2",""))
TypeCat
my_data$TypeCat <- TypeCat
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
my_data$Type <- Type
str(my_data)
Type
str(my_data)
head(my_data,10)
str(my_data)
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
str(my_data)
my_data$names
my_data$"Patient name"
patient_names <- my_data$"Patient name"
head(patient_names, 10)
result <- is.na(my_data)
result
result <- sum(is.na(my_data))
result
result <- sum(is.na(patient_names))
result
result <- sum(is.na(patient_names))
result
result <- sum(is.na(my_data$"Patient name"))
result
result <- sum(is.na(my_data))
result
head(patient_names, 254)
result <- sum(is.na(my_data$Adress))
result <- sum(is.na(my_data$Address))
str(my_data)
result <- sum(is.na(my_data$"NI address"))
result
result <- sum(!is.na(my_data$"NI address"))
result
result <- sum(is.na(my_data))
result
head(my_data, 254)
result <- sum(is.na(my_data$"Patient name"))
result
patient_names <- my_data$"Patient name"
patient_names
str(my_data)
result <- sum(is.na(my_data$"NI address"))
result
result <- sum(is.na(my_data$Type))
result
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE))
str(my_data)
result <- sum(is.na(my_data$Address))
result
colnames(my_data) <- cnames
result <- sum(is.na(my_data$Address))
str(my_data)
name_result <- sum(is.na(my_data$"Patient name"))  address_result <- sum(is.na(my_data$"NI address")) type_result <- sum(is.na(my_data$Type)) age_result <- sum(is.na(my_data$Age)) status_result <- sum(is.na(my_data$"Health status"))
result <- name_result + address_result + type_result + age_result + status_result
result
is.na(my_data)
tail(my_data,3)
length(my_data[my_data == ''])
sum(my_data[my_data == ''])
is.na(my_data)
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
is.na(my_data)
sum(is.na(my_data))
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA"), na.strings = c(" ", "NA"), na.strings = c("  ", "NA")))
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c(str_trim(""), "NA")))
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
sum(is.na(my_data))
missing_values <- sum(is.na(my_data))
missing_values
data_no_na <- na.omit(my_data)
data_no_na <- !na.omit(my_data)
data_no_na <- na.omit(my_data)
data_no_na
nrow(data_no_na)
nrow(my_data)
tail(data_no_na, 10)
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
str(my_data)
str(my_data) class(my_data) cnames <- c("Patient name", "NI address", "Type", "Age", "Health status") colnames(my_data) <- cnames
str(my_data)
class(my_data)
colnames(my_data) <- cnames
str(my_data)
str(my_data) class(my_data) cnames <- c("Patient name", "NI address", "Type", "Age", "Health status") colnames(my_data) <- cnames str(my_data)
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
str(my_data) class(my_data) cnames <- c("Patient name", "NI address", "Type", "Age", "Health status") colnames(my_data) <- cnames str(my_data)
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
Status
my_data$Status <- Status
my_data$"Health status" <- Status
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
Status
my_data$"Health status" <- Status
str(my_data)
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
my_data$Type <- Type
str(my_data)
cnames <- c("Patient name", "NI address", "Type", "Age", "Status")
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
Status
my_data$Status <- Status
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
Status
my_data$Status <- Status
cnames <- c("Patient name", "NI address", "Type", "Age", "Status")
colnames(my_data) <- cnames
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
Type
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
my_data$Status <- Status
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
my_data$Status <- Status
str(my_data)
cnames <- c("Patient name", "NI address", "Type", "Age", "Status")
colnames(my_data) <- cnames
Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2"))
my_data$Type <- Type
Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
my_data$Status <- Status
str(my_data)
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
cnames <- c("Patient name", "NI address", "Type", "Age", "Health status")
colnames(my_data) <- cnames
patient_names <- my_data$"Patient name"
head(patient_names, 10)
patient_names <- my_data$"Patient name"
class(patient_names)
head(patient_names, 10)
missing_values <- sum(is.na(my_data))
missing_values
data_no_na <- na.omit(my_data)
)
data_no_na <- na.omit(my_data)
data_no_na <- na.omit(my_data)
nrow(data_no_na)
nrow(my_data)
data_no_na <- na.omit(my_data)
count_missing_data <- nrow(data_no_na)
count_missing_data
my_data <- na.omit(my_data) # remove the missing values from my_data
my_data
my_data <- na.omit(my_data) # remove the missing values from my_data
my_data
count_no_missing_data <- nrow(my_data) # count the number of rows with no missing data
count_no_missing_data
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA")))
nrow(my_data)
cnames <- c("Patient name", "NI address", "Type", "Age", "Status")
str(my_data)
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA", " ")))
nrow(my_data)
my_data <- na.omit(my_data) # remove the missing values from my_data
my_data
count_no_missing_data <- nrow(my_data) # count the number of rows with no missing data
count_no_missing_data <- nrow(my_data) # count the number of rows with no missing data
count_no_missing_data
my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA", " ")))
nrow(my_data)
my_data = read.csv("Diabetes-md.csv", header = TRUE) str(my_data)             #structure class(my_data) cnames <- c( "This Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/18", "01/11/18", "10/21/18", "10/28/18", "05/01/18") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat
my_data$AgeCat
summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4
summary_col
my_data < - data.frame(my_data, summary_col)
my_data <- data.frame(my_data, summary_col)
my_data
my_data
my_data
my_data
my_data
date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date
Sys.Date
startdate <- as.Date("2004-02-13") enddate <- as.Date("2018-01-22") days <- enddate - startdate days
startdate <- as.Date("1968-04-26") enddate <- as.Date("2018-03-21") days <- enddate - startdate days
#Display date difference startdate <- as.Date("1994-05-0`1") enddate <- as.Date("2018-03-21") days <- enddate - startdate days
startdate <- as.Date("1994-05-0`1") enddate <- as.Date("2018-03-21") days <- enddate - startdate days
startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days
today <- Sys.Date() dob <- as.Date("1968-04-26")
difftime(today, dob)
today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob) diff_dates
today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates
?difftime()
diff_dates <- difftime(today, dob, units = "days, weeks") diff_dates
diff_dates <- difftime(today, dob, units = "years") diff_dates
diff_dates <- difftime(today, dob, units = "weeks") diff_dates
my_data
my_data new_data <- my_data[order(my_data$Age),] new_data
new_data
my_data new_data <- my_data[order(my_data$Age),] new_data
attach(my_data)
str(my_data$Age)
str(my_data$Gender)
attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),]
new_data
new_data <- my_data[order(-Gender,-Age),] new_data
new_data <- my_data[order(Gender,Age),] new_data
new_data <- na.omit(my_data)
new_data
new_data <- complete.cases(my_data)
new_data
count_missing_rows = sum(new_data)
count_missing_rows
new_data <- !complete.cases(my_data) new_data #sum count_missing_rows = sum(new_data) count_missing_rows
complete_data <- my_data[complete.cases(my_data),]
complete_data
complete_data <- !my_data[complete.cases(my_data),] complete_data
new_data <- !complete.cases(my_data) new_data
count_missing_rows = sum(new_data) count_missing_rows
complete_data <- my_data[complete.cases(my_data),] complete_data
complete_data <- my_data[!complete.cases(my_data),] complete_data
incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data
my_data
attach(my_data) my_mean = mean(my_data[Age])
attach(my_data) my_mean = complete.cases(my_data[Age])
attach(my_data) my_mean = complete.cases(my_data[my_data$Age])
my_data
mean
my_mean
my_mean = mean(is.na(my_data$Age))
my_mean
my_mean = mean(!is.na(my_data$Age))
my_mean
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x <- x * 3
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my == NA
my_data == NA
sum(is.na(my_data))
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean
#Import the diabetes data available on Blackboard called diabetes - md into a new data frame called my_data. my_data = read.csv("Diabetes-md.csv", header = TRUE) str(my_data)             #structure class(my_data) cnames <- c( "This Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/18", "01/11/18", "10/21/18", "10/28/18", "05/01/18") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4 summary_col # new column my_data <- data.frame(my_data, summary_col) my_data date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date #Display date difference startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days #show from dob to now today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data #Multiple Sort attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),] new_data # remove rows that contain NA new_data <- na.omit(my_data) new_data # count all missing rows new_data <- !complete.cases(my_data) new_data count_missing_rows = sum(new_data) count_missing_rows # show all that don't have missing values complete_data <- my_data[complete.cases(my_data),] complete_data # show all that do have missing values incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data # mean of complete  values in Age attribute my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean
my_data$Date <- as.Date(my_data, "%d/%m%Y")
my_data$Date <- as.Date(my_data$Date, "%d/%m%Y")
my_data
my_data$Date <- as.Date(my_data$Date, "%d/%m/%Y")
my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y")
my_data$Date <- as.Date(my_data$Date, "%m/%d/%y")
my_data$Date
my_data
my_data
my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y")
my_data$This.Date <- as.Date(my_data$Date, "%m/%d/%Y")
cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/18", "01/11/18", "10/21/18", "10/28/18", "05/01/18") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1)
cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/18", "01/11/18", "10/21/18", "10/28/18", "05/01/18") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4 summary_col # new column my_data <- data.frame(my_data, summary_col) my_data date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date #Display date difference startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days #show from dob to now today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data #Multiple Sort attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),] new_data # remove rows that contain NA new_data <- na.omit(my_data) new_data # count all missing rows new_data <- !complete.cases(my_data) new_data count_missing_rows = sum(new_data) count_missing_rows # show all that don't have missing values complete_data <- my_data[complete.cases(my_data),] complete_data # show all that do have missing values incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data # mean of complete  values in Age attribute my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean
my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y")
startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31")
new_data <- my_data[which(my_data$Date >= startdate & my_dada$Date <= enddate),] new_data
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data
my_data
cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/2018", "01/11/2018", "10/21/2018", "10/28/2018", "05/01/2018") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4 summary_col # new column my_data <- data.frame(my_data, summary_col) my_data date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date #Display date difference startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days #show from dob to now today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data #Multiple Sort attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),] new_data # remove rows that contain NA new_data <- na.omit(my_data) new_data # count all missing rows new_data <- !complete.cases(my_data) new_data count_missing_rows = sum(new_data) count_missing_rows # show all that don't have missing values complete_data <- my_data[complete.cases(my_data),] complete_data # show all that do have missing values incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data # mean of complete  values in Age attribute my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean #Swirl #library(swirl) #swirl() my_data my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y") startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31") new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data
my_data my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y") startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31") new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data
# x = 2 x <- 2 y <- 5 #show the contents of x x y z <- 22.3 z a <- b <- 8 x <- a + b x #remove the variable  rm(a) a #what is the data type of the data class(z) #test if it is numeric is.numeric(b) #test if integer is.integer(z) xChar <- "hello" xChar #lengh nchar(xChar) #nchar does not work on factor data #dates are in america format  = 8 March 2018 date1 <- "2018-03-08" date1 #times date2 <- as.POSIXct("2018-03-08") class(date2) #logical k <- TRUE class(k) vectorX <- c(10.1, 150, 2, 3, 55) vectorX class(vectorX) 1 / vectorX vectorY <- c(vectorX, vectorX, 1, 2, 3) vectorY #Install Swirl install.packages("swirl") library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming") swirl() x <- c(10.4, 5.6, 3.1, 6.4, 21.7) y <- c(x, 0, x) z <- 2 * x + y + 1 z z <- c(1:3, NA) result <- is.na(z) result vec1 <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Hurling", "Basketball", "Tennis", "Cricket", "Lacrosse") vec2 <- c("Hockey", "Lacrosse", "Hockey", "Water Polo", "Hockey", "Lacrosse") vec2 <- c(vec2,vec1) vec2 vec2_factor <- as.factor(vec2) vec2_factor x <- c(34, 56, 87, NA, 4, 77, NA, 21, NA, 39) sum(is.na(x)) #count(is.na(x)) length(is.na(x)) y <- is.na(x) y y * 1 a <- c(1, 2, 4, 5, 6) b <- c(3, 2, 4, 1, 9) cbind(a, b) rbind(a, b) ################################### #  Coding Techniques ################################### #Import the diabetes data available on Blackboard called diabetes - md into a new data frame called my_data. my_data = read.csv("Diabetes-md.csv", header = TRUE) str(my_data)             #structure class(my_data) cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/2018", "01/11/2018", "10/21/2018", "10/28/2018", "05/01/2018") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4 summary_col # new column my_data <- data.frame(my_data, summary_col) my_data date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date #Display date difference startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days #show from dob to now today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data #Multiple Sort attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),] new_data # remove rows that contain NA new_data <- na.omit(my_data) new_data # count all missing rows new_data <- !complete.cases(my_data) new_data count_missing_rows = sum(new_data) count_missing_rows # show all that don't have missing values complete_data <- my_data[complete.cases(my_data),] complete_data # show all that do have missing values incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data # mean of complete  values in Age attribute my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean #Swirl #library(swirl) #swirl() my_data my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y") startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31") new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data
#Import the diabetes data available on Blackboard called diabetes - md into a new data frame called my_data. my_data = read.csv("Diabetes-md.csv", header = TRUE) str(my_data)             #structure class(my_data) cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/2018", "01/11/2018", "10/21/2018", "10/28/2018", "05/01/2018") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4 summary_col # new column my_data <- data.frame(my_data, summary_col) my_data date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date #Display date difference startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days #show from dob to now today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data #Multiple Sort attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),] new_data # remove rows that contain NA new_data <- na.omit(my_data) new_data # count all missing rows new_data <- !complete.cases(my_data) new_data count_missing_rows = sum(new_data) count_missing_rows # show all that don't have missing values complete_data <- my_data[complete.cases(my_data),] complete_data # show all that do have missing values incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data # mean of complete  values in Age attribute my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean #Swirl #library(swirl) #swirl() my_data my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y") startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31") new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data #drop attributes
attach(my_data)
new_data <- subset(my_data, Age >= 35 | Age < 24, select = c(q1,q2,q3,q4))
cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/2018", "01/11/2018", "10/21/2018", "10/28/2018", "05/01/2018") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data head(my_data, 2)            #show the first 2 rows str(my_data) my_data$Age[my_data$Age == 99] <- NA #re-code to be NA because 99 is wrong my_data # Categories fro age, put in a new column my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age < 26] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "TEstr" # order  AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) AgeCat my_data$AgeCat <- AgeCat my_data$AgeCat summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q4 summary_col # new column my_data <- data.frame(my_data, summary_col) my_data date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date #Display date difference startdate <- as.Date("1994-05-01") enddate <- as.Date("2018-03-21") days <- enddate - startdate days #show from dob to now today <- Sys.Date() dob <- as.Date("1968-04-26") diff_dates <- difftime(today, dob, units = "weeks") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data #Multiple Sort attach(my_data) str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender,Age),] new_data # remove rows that contain NA new_data <- na.omit(my_data) new_data # count all missing rows new_data <- !complete.cases(my_data) new_data count_missing_rows = sum(new_data) count_missing_rows # show all that don't have missing values complete_data <- my_data[complete.cases(my_data),] complete_data # show all that do have missing values incomplete_data <- my_data[!complete.cases(my_data),] incomplete_data # mean of complete  values in Age attribute my_data attach(my_data) my_mean = mean(!is.na(my_data$Age)) my_mean #Swirl #library(swirl) #swirl() my_data my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y") startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31") new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),] new_data #drop attributes #create a subset attach(my_data) my_data str(my_data) new_data <- subset(my_data, Age >= 35 | Age < 24, select = c(q1,q2,q3,q4))
new_data <- subset(my_date, gender = "M" & age > 25, select = c(gender:q4))
new_data <- subset(my_data, gender = "M" & age > 25, select = c(gender:q4))
str(my_data)
new_data <- subset(my_data, Gender = "M" & Age > 25, select = c(Gender:q4))
new_data
new_data <- subset(my_data, Gender = 'M' & Age > 25, select = c(Gender:q4)) new_data
new_data <- subset(my_data, Gender == 'M' & Age > 25, select = c(Gender:q4)) new_data
my_sample <- my_data[sample(1:nrow(my_data), 3, replace = FALSE),]
my_sample
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
install.packages("swirl")
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
swirl()
asdf = 3
add_two_Number <- function(x, y) {     result <- x + y     return (result) }
asdf <- add_two_Number(3,4)
asdf
result <- add_two_Number(3, 4) result
add_two_Number <- function(x, y) {     result <- x + y     return (x + y) } result <- add_two_Number(3, 4) result
add_two_Number <- function(x, y) {     result <- x + y     return(result) } result <- add_two_Number(3, 4) result
add_two_Number <- function(x, y, no3 = 10) {     result <- x + y + no3     return(result) } result <- add_two_Number(3, 4) result
my_data = data.frame(read.csv("C:/Users/Owner/Documents/DataScience/Lotto/Lotto/1999.csv", header = TRUE, na.strings = c("", "NA", " ")))
my_data
str(my_data)
head(my_data, 10)
csv_file_list <- list.files(path = "C:/Users/Owner/Documents/DataScience/Lotto/Lotto", pattern = "*.csv")
csv_file_list
csv_file_list <- list.files(path = "C:/Lotto", pattern = "*.csv")
csv_file_list
combine_results <- function(csv_file_list) {     my_data <- ""     for (item in csv_file_list) {         my_data = data.frame("C:/Lotto" + item)     } }
combine_results <- function(csv_file_list) {     return_data <- ""     for (item in csv_file_list) {         my_data <- data.frame(read.csv("C:/Lotto" + item, header = TRUE, na.strings = c("", "NA", " ")))         return_data <- return_data + my_data     }     return (return_data) }
my_data <= combine_results(csv_file_list)
combine_results <- function(csv_file_list) {     return_data <- ""     for (item in csv_file_list) {         my_data <- data.frame(read.csv("C:/Lotto/" + item, header = TRUE, na.strings = c("", "NA", " ")))         return_data <- return_data + my_data     }     return (return_data) }
my_data <= combine_results(csv_file_list)
combine_results <- function(csv_file_list) {     return_data <- ""     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = false, na.strings = c("", "NA", " ")))         return_data <- return_data + my_data     }     return (return_data) }
my_data <= combine_results(csv_file_list)
combine_results <- function(csv_file_list) {     return_data <- ""     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = FALSE, na.strings = c("", "NA", " ")))         return_data <- return_data + my_data     }     return (return_data) }
my_data <= combine_results(csv_file_list)
combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, na.strings = c("", "NA", " ")))         return_data <- return_data + my_data     }     return (return_data) }
my_data <= combine_results(csv_file_list)
combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, na.strings = c("", "NA", " ")))         return_data <- rbind(return_data, my_data)     }     return (return_data) }
my_data <= combine_results(csv_file_list)
my_data <- combine_results(csv_file_list)
nrow(my_data)
head(my_data,10)
head(my_data,200)
str(my_data)
combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", " ")))         return_data <- rbind(return_data, my_data)     }     return (return_data) }
my_data <- combine_results(csv_file_list) str(my_data) nrow(my_data) head(my_data,200)
str(my_data)
str(my_data)
combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", " ")))         data_of_interest <- my_data[1:8]         return_data <- rbind(return_data, data_of_interest)     }     return (return_data) }
my_data <- combine_results(csv_file_list)
str(my_data)
combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", " ")))         data_of_interest <- my_data[2:8]         return_data <- rbind(return_data, data_of_interest)     }     return (return_data) }
my_data <- combine_results(csv_file_list)
str(my_data)
combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", " ")))         data_of_interest <- my_data[2:9]         return_data <- rbind(return_data, data_of_interest)     }     return (return_data) }
my_data <- combine_results(csv_file_list)
head(my_data,200)
head(my_data,10)
my_data = data.frame(read.csv("C:/Lotto/NIPostcodes.csv", header = TRUE, na.strings = c("", "NA", " ")))
my_data = data.frame(read.csv("C:/Lotto/NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ")))
my_data = data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ")))
str(my_data)
head(my_data, 10)
postcode_data <- NULL
str(postcode_data)
postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ")))
str(postcode_data)
str(postcode_data)
head(postcode_data, 10)
missing_values <- sum(is.na(my_data))
missing_values
missing_values
#Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the total number of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values
total_missing_values <- sum(is.na(postcode_data))
total_missing_values
mean_missing_values = mean(is.na(postcode_data))
mean_missing_values
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values
head(postcode_data, 10)
head(postcode_data, 10)
complete_postcode_data <- my_data[complete.cases(my_data),]
complete_postcode_data <- my_data[complete.cases(postcode_data),]
complete_postcode_data <- postcode_data[complete.cases(postcode_data),]
head(complete_postcode_data,10)
str(complete_postcode_data)
head(complete_postcode_data,10)
str(complete_postcode_data)
    "Townland", "Town", "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey")
colnames(postcode_data) <- c("OrganisationName", "SubBuildingName", "BuildingName", "Number", +     "PrimaryThorfare", "AltThorfare", "SecondaryThorfare", "Locality", +     "Townland", "Town", "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey")
colnames(postcode_data) <- c("OrganisationName", "SubBuildingName", "BuildingName", "Number", "PrimaryThorfare", "AltThorfare", "SecondaryThorfare", "Locality", "Townland", "Town", "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey")
str(complete_postcode_data)
str(postcode_data)
colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare", "SecondaryThorfare",      "Locality", "Townland", "Town", "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey")
str(postcode_data)
#Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey")
str(postcode_data)
head(postcode_data, 10)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10)
County <- factor(postcode_data$County, order = TRUE, levels = c("Antrim", "Armagh", "Down", "Fermanagh", "Londonderry", "Tyrone"))
postcode_data$County <- County
str(postcode_data)
County <- factor(postcode_data$County, order = TRUE, levels =     c("Antrim", "Armagh", "Down", "Fermanagh", "Londonderry", "Tyrone"))
postcode_data$County <- County
str(postcode_data)
head(postcode_data, 10)
    c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE"))
County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE"))
postcode_data$County <- County
str(postcode_data)
head(postcode_data, 10)
tail(postcode_data, 10)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10)
#(1) Import the diabetes-md into a new data frame called my_data # Also set any empty cells to NA my_data = data.frame(read.csv("Diabetes-md.csv", header = TRUE, na.strings = c("", "NA", " "))) nrow(my_data) #(2) Show the structure and class type of my_data. str(my_data) class(my_data) cnames <- c("Patient name", "NI address", "Type", "Age", "Health status") colnames(my_data) <- cnames str(my_data) #(3) The diabetes type and status attributes need to be refactored. Do this for #    both attributes. Show the new structure of the data frame. cnames <- c("Patient name", "NI address", "Type", "Age", "Status") colnames(my_data) <- cnames Type <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #Type my_data$Type <- Type Status <- factor(my_data$Status, order = TRUE, levels = c("Excellent", "Improved", "Poor")) #Status my_data$Status <- Status str(my_data)
head(my_data, 10)
#Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(, 10)
head(postcode_data, 10)
County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE"))
postcode_data$County <- County
str(postcode_data)
head(postcode_data, 10)
str(postcode_data)
abc <- "  ab134 "
trimws(abc,which = "both")
abc <- "  ab 134 "
trimws(abc,which = "both")
trimws(postcode_data, which = "both")
head(postcode_data, 30)
head(postcode_data, 30)
head(postcode_data, 30)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data)
cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/2018", "01/11/2018", "10/21/2018", "10/28/2018", "05/01/2018") country <- c("US", "US", "IRL", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data
cnames <- c( "Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5") dates <- c("10/15/2018", "01/11/2018", "10/21/2018", "10/28/2018", "05/01/2018") country <- c(" US", "US ", "IRL  ", "IRL", "IRL") gender <- c("M", "F", "F", "M", "F") age <- c(32, 45, 25, 39, 99) q1 <- c(5, 3, 3, 3, 2) q2 <- c(4, 5, 5, 3, 2) q3 <- c(5, 2, 5, 4, 1) q4 <- c(5, 5, 5, NA, 2) q5 <- c(5, 5, 2, NA, 1) my_data <- data.frame(dates, country, gender, age, q1, q2, q3, q4, q5) colnames(my_data) <- cnames my_data
sum(postcode_data == ".")
sum(postcode_data$SubBuildingName == ".")
head(postcode_data, 30)
head(postcode_data, 5)
countof <- sum(postcode_data$SubBuildingName == ".") countof
countof <- sum(postcode_data$SubBuildingName == '.') countof
countof <- sum(postcode_data$Number == "17") countof
countof <- sum(postcode_data$Number == 17) countof
postcode_data[1]
postcode_data[1,1]
postcode_data[1,1]
postcode_data[1,5]
postcode_data[2,5]
postcode_data[6408,2]
countof <- sum(postcode_data$PrimaryThorfare == "GLENMORE PLACE")
countof
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),]
my_data my_data$Date <- as.Date(my_data$Date, "%m/%d/%Y") startdate <- as.Date("2018-01-01") enddate <- as.Date("2018-01-31")
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),]
new_data
head(postcode_data$PrimaryThorfare, 5)
head(postcode_data, 5)
head(postcode_data, 5)
countof <- sum(postcode_data$PrimaryThorfare == "HIGH ROAD") countof
retval <- subset(postcode_data, PrimaryThorfare == "HIGH ROAD")
retval
retval
nrow(retval)
countof <- sum(PrimaryThorfare == "HIGH ROAD")
str(postcode_data)
retval <- subset(postcode_data, SubBuildingName == "'") nrow(retval)
retval <- subset(postcode_data, SubBuildingName == ".") nrow(retval)
retval <- subset(postcode_data, SubBuildingName == ".") nrow(retval)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data)
retval <- subset(postcode_data, SubBuildingName == ".") print(retval)
retval <- subset(postcode_data, SubBuildingName == ".") print(nrow(retval))
format(postcode_data, justify = "left")
#head(postcode_data, 5)
#head(postcode_data, 5)
head(postcode_data, 5)
head(postcode_data, 5)
nrow(postcode_data)
ncol(postcode_data)
number_columns <- ncol(postcode_data)
postcode_data <- dataframe[, c(number_columns, 1:number_columns - 1)]
postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)]
head(postcode_data, 5)
head(postcode_data, 10)
head(postcode_data, 10)
str(postcode_data)
Limavady_data <- subset(postcode_data, Locality == "Limavady") Limavady_data
Limavady_data <- subset(postcode_data, Townland == "Limavady") Limavady_data
Limavady
Townland
Limavady_data <- subset(postcode_data, Town == "Limavady")
Limavady_data
Limavady_data <- subset(postcode_data, Town == "LIMAVADY") Limavady_data
head(Limavady_data, 10)
Limavady_data <- subset(postcode_data, Townland == "LIMAVADY") head(Limavady_data, 10)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY") head(Limavady_data, 10)
Limavady_data <- subset(postcode_data, is.element("LIMAVADY",Locality))
head(Limavady_data, 10)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY")
nrow(Limavady_data)
Limavady_data <- subset(postcode_data, is.element("LIMAVADY",Locality))
nrow(Limavady_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY")
nrow(Limavady_data)
Limavady_data <- subset(postcode_data, str_detect(Locality, "LIMAVADY"))
Limavady_data <- sqldf("select * from postcode_data where Locality LIKE '%LIMAVADY%'")
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY")
head(Limavady_data, 10)
nrow(Limavady_data)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data) nrow(postcode_data) ncol(postcode_data) number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10) #trimws(postcode_data, which = "both") head(postcode_data, 5) #retval <- subset(postcode_data, SubBuildingName == ".") #print(nrow(retval)) #countof <- sum(postcode_data$PrimaryThorfare == "GLENMORE PLACE") #countof postcode_data[6408, 2] format(postcode_data, justify = "left") number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY")
nrow(Limavady_data)
sum(is.element("LIMAVADY", postcode_data$Locality))
Limavady_data <- null for (item in postcode_data) {     if ("LIMAVADY" %in% item$Locality) {         rbind(Limavady_data, item)     } }
Limavady_data <- NULL for (item in postcode_data) {     if ("LIMAVADY" %in% item$Locality) {         rbind(Limavady_data, item)     } }
Limavady_data <- NULL for (item in postcode_data) {     if ("LIMAVADY" %in% item[Locality]) {         rbind(Limavady_data, item)     } }
Limavady_data <- NULL for (item in postcode_data) {     if ("LIMAVADY" %in% item.Locality) {         rbind(Limavady_data, item)     } }
Limavady_data <- subset(postcode_data, ("LIMAVADY" %in% Locality))
nrow(Limavady_data)
Limavady_data <- subset(postcode_data, !("LIMAVADY" %in% Locality))
nrow(Limavady_data)
head(Limavady_data, 10)
head(postcode_data, 10)
ports <- head(postcode_data, 10)
ports
ports$Town
is.element("abc", "asdfasdfabcasdfsd")
is.element("abc", "asdfasdfabcasdfsd")
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY") nrow(Limavady_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY" || Town == "LIMAVADY") nrow(Limavady_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY" | Town == "LIMAVADY") nrow(Limavady_data)
str(Limavady_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY") nrow(Limavady_data)
write.csv(Limavady_data, file = "Limavady.csv", row.names = FALSE)
write.csv(Limavady_data, file = "Limavady.csv", row.names = TRUE)
head(Limavady_data, 10)
str(postcode_data)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " "))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data) nrow(postcode_data) ncol(postcode_data) number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY")
str(Limavady_data)
write.csv(Limavady_data, file = "Limavady.csv", row.names = TRUE)
write.csv(Limavady_data[PrimaryKey:YCoordinates], file = "Limavady.csv", row.names = TRUE)
write.csv(Limavady_data[2:16], file = "Limavady.csv", row.names = TRUE)
write.csv(Limavady_data[1:15], file = "Limavady.csv", row.names = TRUE)
write.csv(Limavady_data[2:15], file = "Limavady.csv", row.names = TRUE)
head(Limavady_data, 10)
Limavady_data <- subset(postcode_data[2:15], Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY")
str(Limavady_data)
Limavady_data <- subset(postcode_data[1:15], Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY")
head(Limavady_data, 10)
str(Limavady_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY")
write.csv(Limavady_data[2:3], file = "Limavady.csv", row.names = TRUE)
str(Limavady_data)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", "."))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data) nrow(postcode_data) ncol(postcode_data) number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10)
write.csv(Limavady_data, file = "CleanNIPostcodeData.csv", row.names = TRUE)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", "."))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data) nrow(postcode_data) ncol(postcode_data) number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10) #trimws(postcode_data, which = "both") head(postcode_data, 5) nrow(postcode_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY", replace = FALSE)
number_columns <- ncol(postcode_data)
nrow(postcode_data)
write.csv(Limavady_data, file = "Limavady.csv", row.names = TRUE)
write.csv(Limavady_data, file = "CleanNIPostcodeData.csv", row.names = TRUE)
nrow(postcode_data)
write.csv(postcode_data, file = "CleanNIPostcodeData.csv", row.names = TRUE)
str(postcode_data)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", "."))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data) nrow(postcode_data) ncol(postcode_data) number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10) #trimws(postcode_data, which = "both") head(postcode_data, 5) nrow(postcode_data)
Limavady_data <- NULL str(Limavady_data)
nrow(postcode_data)
nrow(postcode_data)
Limavady_data <- subset(postcode_data, Locality == "LIMAVADY"     | Town == "LIMAVADY" | Townland == "LIMAVADY", replace = FALSE)
nrow(Limavady_data)
write.csv(Limavady_data, file = "Limavady.csv", row.names = TRUE)
str(Limavady_data)
head(Limavady_data, 10)
str(Limavady_data)
str(postcode_data)
head(postcode_data, 10)
tail(postcode_data, 10)
head(postcode_data, 10)
str(postcode_data)
nrow(postcode_data)
postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", ".")))
head(postcode_data, 10)
write.csv(postcode_data, file = "CleanNIPostcodeData.csv", row.names = FALSE, na = "")
head(postcode_data, 10)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", "."))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE")) postcode_data$County <- County str(postcode_data) nrow(postcode_data) ncol(postcode_data) number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(postcode_data, 10) #trimws(postcode_data, which = "both") head(postcode_data, 5) nrow(postcode_data) #retval <- subset(postcode_data, SubBuildingName == ".") #print(nrow(retval)) #countof <- sum(postcode_data$PrimaryThorfare == "GLENMORE PLACE") #countof postcode_data[6408, 2] #format(postcode_data, justify = "left") number_columns <- ncol(postcode_data) # this will move the last column i.e. number_columns column to the first column. #postcode_data <- postcode_data[, c(number_columns, 1:number_columns - 1)] head(Limavady_data, 10) nrow(postcode_data) # Create a new dataset called Limavady_data. # Store within it only information that has locality, townland and town # containing the name “Limavady”. Store this information in an  # external csv file called Limavady. Limavady_data <- NULL str(Limavady_data) Limavady_data <- subset(postcode_data, Locality == "LIMAVADY"     | Town == "LIMAVADY" | Townland == "LIMAVADY", replace = FALSE) nrow(Limavady_data) nrow(postcode_data) write.csv(Limavady_data, file = "Limavady.csv", row.names = TRUE) head(Limavady_data, 10) str(Limavady_data) #Save the modified dataset in a csv file called CleanNIPostcodeData. write.csv(postcode_data, file = "CleanNIPostcodeData.csv", row.names = FALSE, na = "") str(postcode_data) head(postcode_data, 10)
abcd <- format.data.frame(postcode_data)
head(abcd, 10)
abcd <- format.data.frame(postcode_data, format="left")
head(abcd, 10)
abcd <- head(abcd, 10)
abcd
print(abcd, right = FALSE, row.names = TRUE)
print(head(postcode_data, 10), right = FALSE, row.names = TRUE)
print(head(postcode_data, 10), right = FALSE, row.names = TRUE)
print(head(postcode_data, 10), right = FALSE, row.names = TRUE)
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", "."))) str(postcode_data) head(postcode_data, 10) #Show the total number of missing values. total_missing_values <- sum(is.na(postcode_data)) total_missing_values #Show the mean of missing values. mean_missing_values = mean(is.na(postcode_data)) mean_missing_values # show all that do not have missing values complete_postcode_data <- postcode_data[complete.cases(postcode_data),] head(complete_postcode_data,10) str(complete_postcode_data) str(postcode_data) #Assign attribute titles colnames(postcode_data) <- c("OrganisationName", "SubBuildingName",      "BuildingName", "Number", "PrimaryThorfare", "AltThorfare",      "SecondaryThorfare", "Locality", "Townland", "Town",      "County", "Postcode", "XCoordinates", "YCoordinates", "PrimaryKey") str(postcode_data) head(postcode_data, 10) # Modify the County attribute to a categorising factor. County <- factor(postcode_data$County, order = TRUE, levels =     c("ANTRIM", "ARMAGH", "DOWN", "FERMANAGH", "LONDONDERRY", "TYRONE"))
print(head(postcode_data, 10), right = FALSE, row.names = TRUE)
str(postcode_data)
left_aligned <- print(head(postcode_data, 10), right = FALSE, row.names = TRUE)
left_aligned
postcode_data <- NULL str(postcode_data) postcode_data <- data.frame(read.csv("NIPostcodes.csv", header = FALSE, na.strings = c("", "NA", " ", "."))) str(postcode_data)
head(postcode_data, 10)
library(swirl)
swirl()
swirl()
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Statistical Inference")
swirl()
3.2
1
2
32
5
(32-30)/(10/4)
2
15
qt(.95,15)
dim(fs)
t.test(1078)
t.test(1076)
t.test(1078,2,TRUE)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.003960625
mybin[7]=.144 and mybin[8]=.035
library(swirl)
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Open Intro")
swirl()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
range(cars$price)
sum(cars$price)
nrow(Cars)
sum(cars$price) / length(cars$price)
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
Summary(cars$mpgCity)
library(pwr)
library(pwr)
install.packages("pwr")
library(pwr)
?pwr.p.test
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),  sig.level = 0.05, power = 0.80,     alternative =  "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),  sig.level = 0.05, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.55, p2 = 0.50),  sig.level = 0.05, power = 0.80) plot(power_changes)
# p1 is alternative hypothesis - p2 is null hypothesis power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),  sig.level = 0.05, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.01, p2 = 0.1),  sig.level = 0.05, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.50, p2 = 0.75),  sig.level = 0.05, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.50, p2 = 0.75),  sig.level = 0.01, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5),  sig.level = 0.01, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),  sig.level = 0.01, power = 0.80) plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),  sig.level = 0.05, power = 0.80) plot(power_changes)
?pwr.p.test
power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50), sig.level = 0.05, power = 0.80) power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50), sig.level = 0.01, power = 0.80) power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50), sig.level = 0.05, n = 40) power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50), sig.level = 0.01, n = 40) power_changes
?pwr.t.test
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50), sig.level = 0.01, n = 40) power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.65, p2 = 0.50), sig.level = 0.05, power = 0.80) power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.65, p2 = 0.50), sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
?cohen.ES
effect_size <- cohen.ES(test = "r", size = "medium") effect_size
effect_size <- cohen.ES(test = "r", size = "large") effect_size
power_changes <- pwr.p.test(effect_size$effect.size, sig.level = 0.05, power = 0.80)
power_changes <- pwr.p.test(effect_size$effect.size, sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
power_changes
power_changes <- pwr.p.test(r = effect_size$effect.size, sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
power_changes <- pwr.r.test(r = effect_size$effect.size, sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
effect_size <- cohen.ES(test = "r", size = "medium") effect_size power_changes <- pwr.r.test(r = effect_size$effect.size, sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
test <- ES.h(p1 = 0.75, p2 = 0.50) test
other_effect_sizes = c(.2, .5, .8) power_changes <- pwr.p.test(h = other_effect_sizes, sig.level = 0.01, power = 0.80) power_changes
other_effect_sizes = c(.2, .5, .8) power_changes <- pwr.p.test(h = other_effect_sizes, sig.level = 0.05, n = 20) power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = 0.80) power_changes plot(power_changes)
#student alcohol example power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = 0.95) power_changes plot(power_changes)
#student alcohol example power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = 0.8) power_changes plot(power_changes)
power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = 0.8) power_changes plot(power_changes)
install.packages("pwr") library(pwr)
#student alcohol example power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = 0.8) power_changes plot(power_changes)
?pwr.t2n.test
?pwr.t.test
abc <- pwr.t.test(d = c(.2, .5, .8), sig.level = 0.05, power = 0.80))
abc <- pwr.t.test(d = c(.2, .5, .8), sig.level = 0.05, power = 0.80)
abc <- pwr.t.test(d = 1), sig.level = 0.05, power = 0.80)
abc <- pwr.t.test(d = 1, sig.level = 0.05, power = 0.80)
abc
abc <- pwr.t.test(d = 1, sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc
abc <- pwr.t.test(d = ES.h(p1 = 0.65, p2 = 0.50), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc
abc <- pwr.t.test(d = ES.h(p1 = 0.75, p2 = 0.50), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc
abc <- pwr.t.test(d = ES.h(p1 = 0.06, p2 = 0), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc
abc <- pwr.t.test(d = ES.h(p1 = 0.06, p2 = 0), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 > 0.06, p2 = 0), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 200, p2 = 100), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 200, p2 = 100), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 100, p2 = 0), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 100, p2 = 0), sig.level = 0.04, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 100, p2 = 0), sig.level = 0.03, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 100, p2 = 0), sig.level = 0.01, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 100, p2 = 0), sig.level = 0.01, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 200, p2 = 100), sig.level = 0.01, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 1, p2 = 0), sig.level = 0.01, power = 0.80, type = "two.sample", alternative = "two.sided") abc
abc <- pwr.t.test(d = ES.h(p1 = 1, p2 = 0), sig.level = 0.01, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
########################################### abc <- pwr.t.test(d = ES.h(p1 = 1, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.1), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.6), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 1, p2 = 0.6), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.99, p2 = 0.6), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.6), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.1), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.85), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.99, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 1, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.6), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.7), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
effect_size <- cohen.ES(test = "t", size = "medium") effect_size
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 0.9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = 1, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.85), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .75, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .7, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc abc <- pwr.t.test(d = ES.h(p1 = .7, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .8, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.6), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.75), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .99, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0.5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = 0), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = .5), sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided") abc plot(abc)
########################################### # Power Analysis H0: mean <> 0.5. H1: mean > 0.5 # p1 is alternative hypothesis - p2 is null hypothesis ########################################### abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = .5), sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
########################################### # Power Analysis H0: mean <> 0.5. H1: mean > 0.5 # p1 is alternative hypothesis - p2 is null hypothesis ########################################### abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = .5), sig.level = 0.04, power = 0.80, type = "two.sample") abc plot(abc)
########################################### # Power Analysis H0: mean <> 0.5. H1: mean > 0.5 # p1 is alternative hypothesis - p2 is null hypothesis ########################################### abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = .5), sig.level = 0.03, power = 0.80, type = "two.sample") abc plot(abc)
########################################### # Power Analysis H0: mean <> 0.5. H1: mean > 0.5 # p1 is alternative hypothesis - p2 is null hypothesis ########################################### abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = .5), sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
abc <- pwr.t.test(d = .9, sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
abc <- pwr.t.test(h = .9, sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
abc <- pwr.t.test(sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
abc <- pwr.t.test(n = 25, sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
?pwr.t.test
abc <- pwr.t.test(d = .8, sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
#abc <- pwr.t.test(d = ES.h(p1 = .9, p2 = .5), sig.level = 0.05, power = 0.80, type = "two.sample") abc <- pwr.t.test(d = .8, sig.level = 0.05, power = 0.90, type = "two.sample") abc plot(abc)
abc <- pwr.t.test(d = .8, sig.level = 0.05, power = 0.80, type = "two.sample") abc plot(abc)
swirl::install_course
exit
library(swirl)
swirl()
2
swirl()
library(swirl)
swirl()
swirl::install_course
swirl::install_course()
swirl::install_course()
swirl()
mydf <- read.csv(path2csv,stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("deplyr")
packageVersion("dplyr")
bye()
data(diamonds, package = "ggplot2")
dim(diamonds)
head(diamonds,4)
dim(head(diamonds, 4))
diamonds %>% head(4) %>% dim
round(exp(diff(log(x))),1)
x <- c(0.109, 0.359, 0.63, 0.996, 0.515, 0.142, 0.017, 0.829, 0.907) round(exp(diff(log(x))),1)
x %>% log %>% diff %>% exp %>% round(1)
install dplyr()
head(diamonds, 5)
select(diamonds, carat, price)
diamonds %>% select(c(carat,price))
select(diamonds, one_of(my_attributes))
select_(diamonds, one_of(my_attributes))
my_attributes <- c('carat', 'price')
select_(diamonds, one_of(my_attributes))
select(diamonds, one_of(my_attributes))
head(diamonds, 5)
str(diamonds)
head(diamonds,5)
slice(diamonds,1)
slice(diamonds,1:5)
slice(diamonds,c(1:5,8,15:20))
diamonds %>% slicd(c(1:5, 8, 15:20))
diamonds %>% slice(c(1:5, 8, 15:20))
diamonds %>% slice %>% c(1:5, 8, 15:20)
diamonds %>% slice(c(1:5, 8, 15:20))
set <- select(diamonds, carat, price)
ratio <- mutate(set,price/carat)
ratio
head(ratio,t)
head(ratio,5)
mutate(set, ratio = price / carat)
head(ratio,5)
diamonds %>% select(carat, price) %>% mutate(ratio = price/carat)
diamonds %>% mutate(double = ratio / 2)
head(diamonds, 5)
diamonds %>% mutate(double = ratio * 2)
diamonds %>% select(carat, price) %>% mutate(ratio = price / carat, Double = ratio * 2)
diamonds %>% select(carat, price) %>% mutate(ratio = price / carat, double = ratio * 2)
summarise(diamonds, AvgPrice = meand(price))
summarise(diamonds, AvgPrice = mean(price))
summarise(diamonds, AvgPrice = mean(price), MedianPrice = median(price))
summarise(diamonds, AvgPrice = mean(price), MedianPrice = median(price), AvgCarat = mean(carat))
diamonds %>% group_by(cut) %>% summarise(AvgPrice = mean(price))
diamonds %>% group_by(cut, color) %>% summarise(AvgPrice = mean(price))
diamonds %>% group_by(cut, color) %>% summarise(AvgPrice = mean(price)) %>% arrange(AvgPrice)
diamonds %>% group_by(cut, color) %>% summarise(AvgPrice = mean(price)) %>% arrange(AvgPrice)
diamonds %>% group_by(cut, color) %>% summarise(AvgPrice = mean(price)) %>% arrange(AvgPrice)
my_data = data.frame(read.csv("C:/Users/Owner/Documents/DataScience/Lotto/Lotto/1999.csv", header = TRUE, na.strings = c("", "NA", " "))) head(my_data,5)
lotto_data = data.frame(read.csv("C:/Users/Owner/Documents/DataScience/Lotto/Lotto/1999.csv", header = TRUE, na.strings = c("", "NA", " "))) head(lotto_data,5)
lotto_data %>% group_by(a,b,c,d,e,f)
lotto_data %>% group_by(a)
#list all the csv files csv_file_list <- list.files(path = "C:/Lotto", pattern = "*.csv") csv_file_list combine_results <- function(csv_file_list) {     return_data <- NULL     for (item in csv_file_list) {         item <- paste("C:/Lotto/", item, sep = "")         my_data <- data.frame(read.csv(item, header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", " ")))         data_of_interest <- my_data[2:9]         return_data <- rbind(return_data, data_of_interest)     }     return(return_data) } my_data <- combine_results(csv_file_list) str(my_data) nrow(my_data) head(my_data, 10)
tail(my_data, 10)
lotto_data <- my_data
lotto_data %>% summarise(AvgPrice = mean(a))
lotto_data %>% summarise(AvgPrice = mean(a))
lotto_data %>% summarise(AvgPrice = mean(a)) lotto_data %>% summarise(AvgPrice = mean(b)) lotto_data %>% summarise(AvgPrice = mean(c)) lotto_data %>% summarise(AvgPrice = mean(d)) lotto_data %>% summarise(AvgPrice = mean(e)) lotto_data %>% summarise(AvgPrice = mean(f)) lotto_data %>% summarise(AvgPrice = mean(Bonus))
lotto_data %>% summarise(AvgBonus = mean(Bonus))
lotto_data %>% group_by(Bonus) %>% summarise(AvgBonus = mean(Bonus)) %>% arrange(AvgBonus)
lotto_data %>% summarise(AvgPrice = mean(a)) lotto_data %>% summarise(AvgPrice = mean(b)) lotto_data %>% summarise(AvgPrice = mean(c)) lotto_data %>% summarise(AvgPrice = mean(d)) lotto_data %>% summarise(AvgPrice = mean(e)) lotto_data %>% summarise(AvgPrice = mean(f)) lotto_data %>% summarise(AvgBonus = mean(Bonus))
lotto_data %>% summarise(AvgBonus = mean(Bonus))
lotto_data %>% summarise(AvgPrice = mean(a)) lotto_data %>% summarise(AvgPrice = mean(b)) lotto_data %>% summarise(AvgPrice = mean(c)) lotto_data %>% summarise(AvgPrice = mean(d)) lotto_data %>% summarise(AvgPrice = mean(e)) lotto_data %>% summarise(AvgPrice = mean(f))
lotto_data %>% summarise(AvgPrice = range(a))
plot(lotto_data%Bonus) plot(lotto_data$Bonus)
plot(lotto_data$Bonus)
plot(lotto_data$Bonus)
install.packages("hflights")
head(hflights)
library(hflights)
head(hflights)
Dosage <- c(20,30,40,45,60)
drugs <- cbind(Dosage, ResponseToDrugA, ResponseToDrugB)
Dosage <- c(20, 30, 40, 45, 60) ResponseToDrugA <- c(16, 20, 27, 40, 60) ResponseToDrugB <- c(15, 18, 25, 31, 40) drugs <- cbind(Dosage, ResponseToDrugA, ResponseToDrugB)
drugs
drugs <- data.frame(Dosage, ResponseToDrugA, ResponseToDrugB)
drugs
plot(drugs)
plot(Dosage, type ="o", col="blue")
plot(drugs$Dosage, type = "o", col = "blue")
plot(drugs$Dosage, type = "b", col = "blue")
plot(drugs$Dosage, drugs$ResponseToDrugA, type = "b", col = "blue")
?par
oldPar <- par()
plot(Dosage,ResponseToDrugB, type="b")
par(new = TRUE)
plot(drugs$Dosage, drugs$ResponseToDrugA, type = "b", col = "blue") plot(Dosage,ResponseToDrugB, type="b")
par(new = TRUE) plot(drugs$Dosage, drugs$ResponseToDrugA, type = "b") plot(Dosage,ResponseToDrugB, type="b")
par(new = TRUE) plot(Dosage, ResponseToDrugA, type = "b") plot(Dosage, ResponseToDrugB, type = "b")
par(new = TRUE) plot(Dosage, ResponseToDrugA, type = "b") plot(Dosage, ResponseToDrugB, type = "b")
par(new = TRUE) plot(Dosage, ResponseToDrugA, type = "b") plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b") plot(Dosage, ResponseToDrugB, type = "b")
par(new = TRUE)
plot(Dosage, ResponseToDrugA, type = "b")
plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b")
plot(Dosage, ResponseToDrugB, type = "b")
par(new = TRUE)
plot(Dosage, ResponseToDrugA, type = "b")
oldPar <- par(no.readonly = TRUE)
?lty
?par(lty)
plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b", lty = 2)
par(new = TRUE)
plot(Dosage, ResponseToDrugA, type = "b", lty = 2)
plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b", lty = 2)
oldPar <- par(no.readonly = TRUE)
plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17)
plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17)
plot(Dosage, ResponseToDrugB, type = "b")
par(new = TRUE)
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17)
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17) par(new = TRUE) plot(Dosage, ResponseToDrugB, type = "b")
par(oldPar)
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17)
plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17)
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17) par(new = TRUE) plot(Dosage, ResponseToDrugB, type = "b")
plot(Dosage, ResponseToDrugA, type = "b", lty = 2, pch = 17, col = "blue") par(new = TRUE) plot(Dosage, ResponseToDrugB, type = "b")
Dose <- c(20, 30, 40, 45, 60) DrugA <- c(16, 20, 27, 40, 60) DrugB <- c(15, 18, 25, 31, 40) drugs <- data.frame(Dose, DrugA, DrugB) plot(drugs) #type = 0 is blue dot plot(drugs$Dose, type = "o", col = "blue") plot(drugs$Dose, type = "b", col = "blue") # Dose on x, DrugA on y  plot(drugs$Dose, drugs$DrugA, type = "b", col = "blue") #take a snapshot of variable settings oldPar <- par(no.readonly = TRUE) plot(Dose, DrugA, type = "b", lty = 2, pch = 17, col = "blue") par(new = TRUE) plot(Dose, DrugB, type = "b")
plot(Dose,DrugA,type="b", lty = 3, lwd = 3, pch - 15, cex = 2)
plot(Dose,DrugA,type="b", lty = 3, lwd = 3, pch = 15, cex = 2)
plot(Dose, DrugA, type = "b", lty = 2, pch = 17, col = "blue")
par(new = TRUE)
plot(Dose,DrugA,type="b", lty = 3, lwd = 3, pch = 15, cex = 2)
plot(Dose, DrugB, type = "b")
plot(Dose,DrugA,type="b", lty = 3, lwd = 3, pch = 15, cex = 2)
plot(Dose,DrugA,type="b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = c(0, 100))
title(main = "Drug dosage", col.main = "blue", font.main = 4)
lines(Dose, DrugB, type = "o", pch =22, lty=2, col = "red")
graph_range <- range(0,DrugA, DrugB)
graph_range
plot(DrugB, axes = FALSE, ylim = c(0, graph_range))
graph_range <- range(0, DrugA, DrugB)
plot(DrugB, axes = FALSE, ylim = c(0, graph_range))
plot(DrugB, axes = FALSE, ylim = graph_range)
plot(Dose, DrugB, axes = FALSE, ylim = c(0, graph_range))
plot(Dose, DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = c(0, 100))
plot(Dose, DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = c(0, graph_range))
graph_range
plot(Dose, DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range)
plot(Dose, DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE)
lines(Dose, DrugB, type = "o", pch = 22, lty = 2, col = "red")
plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE)
lines(DrugB, type = "o", pch = 22, lty = 2, col = "red")
rtvs::debug_source("C:/Users/Owner/Source/Repos/DataScience/Test/script.R")
lines(DrugB, type = "o", pch = 22, lty = 2, col = "red")
axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml"))
?axis
axis.labels("abc")
?axis
axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml"), xlab ="AASD")
axis(2, las = 1, at = 5 * 0:graph_range[2])
plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = TRUE) lines(DrugB, type = "o", pch = 22, lty = 2, col = "red") #Now cerate a new x axis with ml labels axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml")) axis(2, las = 1, at = 5 * 0:graph_range[2])
#turn off axes annotation plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE) lines(DrugB, type = "o", pch = 22, lty = 2, col = "red") #Now cerate a new x axis with ml labels axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml")) axis(2, las = 1, at = 5 * 0:graph_range[2])
#turn off axes annotation plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE, xlag = "asdf") lines(DrugB, type = "o", pch = 22, lty = 2, col = "red") #Now cerate a new x axis with ml labels axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml")) axis(2, las = 1, at = 5 * 0:graph_range[2])
#turn off axes annotation plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE, xlab = "asdf") lines(DrugB, type = "o", pch = 22, lty = 2, col = "red") #Now cerate a new x axis with ml labels axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml")) axis(2, las = 1, at = 5 * 0:graph_range[2])
plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE, xlab = "Mililitres") lines(DrugB, type = "o", pch = 22, lty = 2, col = "red") #Now cerate a new x axis with ml labels axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml")) axis(2, las = 1, at = 5 * 0:graph_range[2])
?box
box(lty ="solid")
plot(DrugA, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = graph_range, axes = FALSE, xlab = "Mililitres")
lines(DrugB, type = "o", pch = 22, lty = 2, col = "red")
axis(1, at = 1:5, lab = c("20 ml", "40 ml", "60 ml", "80 ml", "100 ml"))
axis(2, las = 1, at = 5 * 0:graph_range[2])
box(lty ="solid")
library(car)
scatter.smooth(x = cars$speed, y = cars$dist, main = "Dist ~ Speed")
install.packages("e1071") library(e1071)
par(mfrow = c(1,2))
plot(density(cars$speed), main = "Density Plot: Speeed", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency",     sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
par(mfrow = c(1, 2))
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency",     sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
polygon(density(cars$speed), col = "red")
nrow(cars)
plot(density(cars$dist), main = "Density Plot: Distance", ylab = "Frequency",     sub = paste("Skewness:", round(e1071::skewness(cars$dist), 2))) # Fill with red polygon(density(cars$dist), col = "red")
cor(cars$speed, cars$dist)
linearMOd <- lm(dist ~ speed, data = cars)
pring(linearMOd)
linearMod <- lm(dist ~ speed, data = cars) print(linearMod)
boxplot(cars$speed) boxplot(cars$dist)
par(mfrow = c(1, 2)) #Regression analysis #asscess Skewness #If it's a bell curve then it's good for linear regression plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency",     sub = paste("Skewness:", round(e1071::skewness(cars$speed), 2))) # Fill with red polygon(density(cars$speed), col = "red") plot(density(cars$dist), main = "Density Plot: Distance", ylab = "Frequency",     sub = paste("Skewness:", round(e1071::skewness(cars$dist), 2)))
polygon(density(cars$dist), col = "red")
#build linear regression model on full data linearMod <- lm(dist ~ speed, data = cars) print(linearMod)
summary(linearMod)
AIC(linearMod) BIC(linearMod)
no_of_records <- sample(1:nrow(cars), 0.8 * nrow(cars))
#model training data training_data <- cars[no_of_records,] # test data test_date <- cars[-no_of_records,]
#model training data training_data <- cars[no_of_records,] # test data test_data <- cars[-no_of_records,]
training_data test_data
lr_model <- lm(dist ~ speed, data = training_data)
dist_predicted <- predict(lr_model,test_data)
nrow(test_data)
nrow(training_data)
dist_predicted
summary(lr_model)
actuals_prediction <- data.frame(cbind(actuals = test_data$dist, predicted = dist_predicted))
head(actuals_prediction)
actuals_prediction
correlation_accuracy <- cor(actuals_prediction) correlation_accuracy
# min max accuracy min_max_accuracy <- mean(apply(actuals_prediction, 1, min) / apply(actuals_prediction, 1, max)) min_max_accuracy
mape <- mean(abs((actuals_prediction$predicted - actuals_prediction$actuals)) / actuals_prediction) mape
mape <- mean(abs((actuals_prediction$predicted - actuals_prediction$actuals)) / actuals_prediction$actuals) mape
# min max accuracy min_max_accuracy <- mean(apply(actuals_prediction, 1, min) / apply(actuals_prediction, 1, max)) min_max_accuracy #MAPE mape <- mean(abs((actuals_prediction$predicted - actuals_prediction$actuals)) / actuals_prediction$actuals) mape
install.packages("DAAG") library(DAAG)
cvResults <-suppressWarnings(CVlm(data = cars, form.lm = dist ~ speed, m = 5, dots = FALSE, seed = 29, legend.pos = "topleft", printit = FALSE,main = "Small symbos are predicted values while bigger ones are actuals."))
cvResults <- suppressWarnings(CVlm(data = cars, form.lm = dist ~ speed, m = 5, dots = FALSE, seed = 29, legend.pos = "topleft", printit = FALSE, main = "Small symbos are predicted values while bigger ones are actuals."))
summary(cvResults)
ts_data <- EuStockMarkets[, 1] opar <- par() par(mfrow = c(1, 2)) decomposed_result <- decompose(ts_data, type = "mult") plot(decomposed_result)
decomposed_result <- decompose(ts_data, type = "additive") plot(decomposed_result)
# Arima Modelling ts_data <- EuStockMarkets[, 1] opar <- par() par(mfrow = c(1, 2)) decomposed_result <- decompose(ts_data, type = "mult") plot(decomposed_result) decomposed_result <- decompose(ts_data, type = "additive") plot(decomposed_result) seasonal_trend_error <- stl(ts_data, s.window = "periodic") par <- opar
stlRes$time.series
seasonal_trend_error$time.series
lagged_ts <- lag(ts_data,3)
lagged_ts
install.packages("DataCombine") library(DataCombine) my_dataframe <- as.data.frame(ts_data)
#create lag1 variable my_dataframe <- slide(my_dataframe, "x", NewVar = "xLag1", slideBy = -1) #create lead 1 variable my_dataframe <- slide(my_dataframe, "x", NewVar = "xLead1", slideBy = 1) head(my_dataframe)
acf_res <- acf(AirPassengers)
pacf_res <- pacf(AirPassengers)
plot(JohnsonJohnson)
trained_model <- lm(JohnsonJohnson ~ (1:length(JohnsonJohnson)))
trained_model <- lm(JohnsonJohnson ~ c(1:length(JohnsonJohnson)))
plot(resid(trained_model), type = "l")
library(forecast)
install.packages("forecast") library(forecast)
ts_decompose <- stl(airmiles, "periodic") ts_seasonal_adjust <- seasadj(ts_decompose) plot(AirPassengers, type = "l")
plot(ts_seasonal_adjust, type = "l")
ts_seasonal_adjust <- seasadj(ts_decompose)
ts_decompose <- stl(airmiles, "periodic")
ts_decompose <- stl(AirPassengers, "periodic") ts_seasonal_adjust <- seasadj(ts_decompose) plot(AirPassengers, type = "l") plot(ts_seasonal_adjust, type = "l")
plot(AirPassengers, type = "l")
ts_decompose <- stl(AirPassengers, "periodic")
plot(AirPassengers, type = "l")
plot(ts_seasonal_adjust, type = "l")
seasonplot(ts_seasonal_adjust, 12, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: Airpassengers")
library(tseries)
adf.test(ts_data)
kpss.test(ts_data)
adf.test(ts_data)
kpss.test(ts_data)
nsdiffs(AirPassengers)
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1)
plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = nsdiffs(AirPassengers)) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = nsdiffs(AirPassengers)) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced")
AirPassengers_seasdiff2 <- diff(AirPassengers_seasdiff, lag = frequency(AirPassengers_seasdiff), differences = 1) plot(AirPassengers_seasdiff2, type = "l", main = "2 Seasonnally Differenced")
AirPassengers_seasdiff2 <- diff(AirPassengers_seasdiff, lag = frequency(AirPassengers_seasdiff), differences = 1) plot(AirPassengers_seasdiff2, type = "l", main = "2 Seasonnally Differenced")
nsdiffs(AirPassengers_seasdiff)
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1) plot(AirPassengers_seasdiff, type = "l", main = "Seasonnally Differenced") nsdiffs(AirPassengers_seasdiff) AirPassengers_seasdiff2 <- diff(AirPassengers_seasdiff, lag = frequency(AirPassengers_seasdiff), differences = 1) plot(AirPassengers_seasdiff2, type = "l", main = "2 Seasonnally Differenced")
plot(Nile)
nsdiffs(Nile)
ndiffs(Nile)
d_nile <- diff(Nile) plot(d_nile)
ndiffs(d_nile)
adf.test(d_nile)
Pacf(d_nile)
Acf(d_nile) Pacf(d_nile)
Pacf(d_nile)
Acf(d_nile) Pacf(d_nile)
fit <- Arima(Nile, order = c(0, 1, 1)) fit
accuracy(fit)
qqnorm(fit$residuals)
qqline(fit$residuals)
Box.test(fit$residuals, type = "Ljun-Box")
Box.test(fit$residuals, type = "Ljung-Box")
forecast(fit, 3)
plot(fit)
my_forecast <- forecast(fit, 3) plot(my_forecast)
fit <- auto.arima(Nile)
fit
my_forecast <- forecast(fit, 3) plot(my_forecast)
